
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;
import lexico.LexicoJava;
import objetosAnalisis.Token;
import objetosAnalisis.errorE;
import tablaSimbolo.TablaSimbolo;
import tablaSimbolo.Variable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoJava extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoJava() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\314\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\002\004\000\002\004\006\000\002\004\006" +
    "\000\002\004\002\000\002\004\004\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\004\000\002" +
    "\005\007\000\002\005\007\000\002\005\006\000\002\070" +
    "\004\000\002\006\007\000\002\006\004\000\002\071\007" +
    "\000\002\071\006\000\002\071\006\000\002\071\007\000" +
    "\002\007\004\000\002\007\003\000\002\007\004\000\002" +
    "\007\005\000\002\007\005\000\002\007\004\000\002\010" +
    "\004\000\002\011\004\000\002\011\004\000\002\012\005" +
    "\000\002\012\006\000\002\012\004\000\002\012\003\000" +
    "\002\012\004\000\002\013\003\000\002\013\002\000\002" +
    "\014\003\000\002\014\007\000\002\014\006\000\002\014" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\017\004\000\002" +
    "\017\002\000\002\017\004\000\002\021\004\000\002\021" +
    "\002\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\004\000\002" +
    "\020\003\000\002\020\003\000\002\020\004\000\002\020" +
    "\004\000\002\020\003\000\002\020\005\000\002\060\003" +
    "\000\002\060\006\000\002\060\010\000\002\060\011\000" +
    "\002\060\005\000\002\060\004\000\002\060\005\000\002" +
    "\060\006\000\002\060\006\000\002\060\007\000\002\057" +
    "\007\000\002\057\010\000\002\057\005\000\002\057\004" +
    "\000\002\057\004\000\002\056\003\000\002\056\004\000" +
    "\002\055\005\000\002\055\005\000\002\055\006\000\002" +
    "\055\006\000\002\023\011\000\002\024\007\000\002\025" +
    "\011\000\002\027\011\000\002\030\013\000\002\031\011" +
    "\000\002\032\005\000\002\032\004\000\002\032\002\000" +
    "\002\032\004\000\002\033\006\000\002\033\005\000\002" +
    "\042\004\000\002\042\002\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\004\000\002\034\003\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\034\005\000\002" +
    "\035\003\000\002\035\004\000\002\035\005\000\002\035" +
    "\006\000\002\035\006\000\002\035\007\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\026\007\000\002\026\010\000\002\026\005\000\002" +
    "\026\004\000\002\026\007\000\002\026\006\000\002\026" +
    "\004\000\002\036\004\000\002\036\005\000\002\037\003" +
    "\000\002\037\002\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\004\000\002\040\004\000\002" +
    "\040\004\000\002\040\004\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\006\000\002\041\007\000\002" +
    "\043\003\000\002\063\004\000\002\065\005\000\002\065" +
    "\005\000\002\065\002\000\002\064\004\000\002\066\005" +
    "\000\002\066\005\000\002\066\002\000\002\067\005\000" +
    "\002\067\003\000\002\044\005\000\002\044\007\000\002" +
    "\044\007\000\002\045\005\000\002\045\007\000\002\045" +
    "\007\000\002\046\012\000\002\046\012\000\002\046\012" +
    "\000\002\062\003\000\002\062\003\000\002\062\002\000" +
    "\002\047\005\000\002\047\005\000\002\047\005\000\002" +
    "\047\006\000\002\047\006\000\002\050\007\000\002\050" +
    "\006\000\002\073\006\000\002\073\005\000\002\051\003" +
    "\000\002\051\005\000\002\051\004\000\002\072\004\000" +
    "\002\072\004\000\002\052\007\000\002\052\010\000\002" +
    "\052\005\000\002\052\007\000\002\052\006\000\002\053" +
    "\005\000\002\053\003\000\002\053\004\000\002\054\007" +
    "\000\002\054\006\000\002\061\004\000\002\061\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\022\002\uffff\003\006\035\004\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\001\002\000\004\036\u0194" +
    "\001\002\000\014\037\022\040\020\041\015\042\021\043" +
    "\017\001\002\000\006\007\011\014\012\001\002\000\004" +
    "\002\010\001\002\000\004\002\001\001\002\000\004\002" +
    "\ufffe\001\002\000\014\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\001\002\000\004\043\017\001\002\000\004\002" +
    "\000\001\002\000\022\036\uffdc\042\024\043\uffdc\044\uffdc" +
    "\045\uffdc\050\uffdc\052\uffdc\054\uffdc\001\002\000\004\006" +
    "\u018c\001\002\000\004\036\u018b\001\002\000\022\036\uffdc" +
    "\042\024\043\uffdc\044\uffdc\045\uffdc\050\uffdc\052\uffdc\054" +
    "\uffdc\001\002\000\004\043\017\001\002\000\022\036\uffdc" +
    "\042\024\043\uffdc\044\uffdc\045\uffdc\050\uffdc\052\uffdc\054" +
    "\uffdc\001\002\000\020\036\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\050\uffd0\052\uffd0\054\uffd0\001\002\000\020\036\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\050\uffdd\052\uffdd\054\uffdd\001\002" +
    "\000\004\006\026\001\002\000\032\003\040\007\uffcb\036" +
    "\033\037\022\040\020\041\015\042\041\044\030\045\034" +
    "\050\036\052\031\054\047\001\002\000\006\003\060\036" +
    "\203\001\002\000\006\003\uffd7\036\uffd7\001\002\000\006" +
    "\003\uffd3\036\uffd3\001\002\000\032\003\uffea\007\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\044\uffea\045\uffea" +
    "\050\uffea\052\uffea\054\uffea\001\002\000\010\003\060\010" +
    "\273\036\203\001\002\000\006\003\uffd6\036\uffd6\001\002" +
    "\000\004\007\u0188\001\002\000\006\003\uffd4\036\uffd4\001" +
    "\002\000\004\006\u0185\001\002\000\004\007\u0184\001\002" +
    "\000\016\036\u0181\044\030\045\034\050\036\052\031\054" +
    "\047\001\002\000\016\036\053\044\030\045\034\050\036" +
    "\052\031\054\047\001\002\000\032\003\uffca\007\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\044\uffca\045\uffca" +
    "\050\uffca\052\uffca\054\uffca\001\002\000\032\003\uffc9\007" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9" +
    "\045\uffc9\050\uffc9\052\uffc9\054\uffc9\001\002\000\032\003" +
    "\040\007\uffcb\036\033\037\022\040\020\041\015\042\041" +
    "\044\030\045\034\050\036\052\031\054\047\001\002\000" +
    "\032\003\uffc8\007\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\044\uffc8\045\uffc8\050\uffc8\052\uffc8\054\uffc8\001" +
    "\002\000\006\003\uffd5\036\uffd5\001\002\000\004\007\uffcc" +
    "\001\002\000\004\006\u017e\001\002\000\004\006\303\001" +
    "\002\000\010\003\060\010\273\036\271\001\002\000\006" +
    "\003\060\036\056\001\002\000\032\003\uffeb\007\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\044\uffeb\045\uffeb" +
    "\050\uffeb\052\uffeb\054\uffeb\001\002\000\014\003\064\010" +
    "\066\013\062\014\067\023\065\001\002\000\062\003\uffe5" +
    "\007\uffe5\015\uffe5\017\uffe5\020\uffe5\023\uffe5\033\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\045\uffe5" +
    "\050\uffe5\052\uffe5\054\uffe5\055\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\064\uffe5\001\002\000\004\014\061" +
    "\001\002\000\062\003\uffe3\007\uffe3\015\uffe3\017\uffe3\020" +
    "\uffe3\023\uffe3\033\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\044\uffe3\045\uffe3\050\uffe3\052\uffe3\054\uffe3\055" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\001\002\000\006\003\060\036\203\001\002\000\062\003" +
    "\uffe4\007\uffe4\015\uffe4\017\uffe4\020\uffe4\023\uffe4\033\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\044\uffe4\045" +
    "\uffe4\050\uffe4\052\uffe4\054\uffe4\055\uffe4\057\uffe4\060\uffe4" +
    "\061\uffe4\062\uffe4\063\uffe4\064\uffe4\001\002\000\004\036" +
    "\267\001\002\000\030\003\121\004\127\005\107\010\130" +
    "\036\112\046\111\047\106\051\125\053\114\065\123\066" +
    "\120\001\002\000\022\003\073\011\070\036\072\044\030" +
    "\045\034\050\036\052\031\054\047\001\002\000\062\003" +
    "\uffdf\007\uffdf\015\uffdf\017\uffdf\020\uffdf\023\uffdf\033\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\045" +
    "\uffdf\050\uffdf\052\uffdf\054\uffdf\055\uffdf\057\uffdf\060\uffdf" +
    "\061\uffdf\062\uffdf\063\uffdf\064\uffdf\001\002\000\004\006" +
    "\uffee\001\002\000\006\011\uff46\013\102\001\002\000\004" +
    "\036\101\001\002\000\004\011\100\001\002\000\004\036" +
    "\077\001\002\000\004\011\076\001\002\000\004\006\uffef" +
    "\001\002\000\006\011\uff43\013\uff43\001\002\000\004\011" +
    "\uff44\001\002\000\006\011\uff42\013\uff42\001\002\000\020" +
    "\003\073\036\072\044\030\045\034\050\036\052\031\054" +
    "\047\001\002\000\004\011\uff45\001\002\000\016\024\253" +
    "\027\254\030\252\031\257\032\255\034\256\001\002\000" +
    "\036\011\uff62\013\uff62\014\uff62\016\uff62\017\244\020\243" +
    "\024\uff62\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62\032" +
    "\uff62\034\uff62\001\002\000\042\011\uff84\012\236\013\uff84" +
    "\014\uff84\017\uff84\020\uff84\021\uff84\022\uff84\024\uff84\025" +
    "\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\034\uff84" +
    "\001\002\000\042\011\uff86\013\uff86\014\uff86\016\uff86\017" +
    "\uff86\020\uff86\021\uff86\022\uff86\024\uff86\025\uff86\026\uff86" +
    "\027\uff86\030\uff86\031\uff86\032\uff86\034\uff86\001\002\000" +
    "\042\011\uff5e\013\uff5e\014\uff5e\016\uff5e\017\uff5e\020\uff5e" +
    "\021\227\022\230\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030" +
    "\uff5e\031\uff5e\032\uff5e\034\uff5e\001\002\000\014\011\uff6b" +
    "\013\uff6b\014\uff6b\025\uff6b\026\uff6b\001\002\000\050\003" +
    "\207\010\210\011\uff8d\012\206\013\uff8d\014\uff8d\016\uff8d" +
    "\017\uff8d\020\uff8d\021\uff8d\022\uff8d\024\uff8d\025\uff8d\026" +
    "\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\034\uff8d\001\002" +
    "\000\006\013\201\014\202\001\002\000\042\011\uff85\013" +
    "\uff85\014\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85" +
    "\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032" +
    "\uff85\034\uff85\001\002\000\042\011\uff5c\013\uff5c\014\uff5c" +
    "\016\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c\024\uff5c\025" +
    "\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c\034\uff5c" +
    "\001\002\000\030\011\uff69\013\uff69\014\uff69\024\uff66\025" +
    "\uff69\026\uff69\027\uff66\030\uff66\031\uff66\032\uff66\034\uff66" +
    "\001\002\000\010\011\uff77\013\uff77\014\uff77\001\002\000" +
    "\014\011\uff6a\013\uff6a\014\uff6a\025\uff6a\026\uff6a\001\002" +
    "\000\006\011\146\014\200\001\002\000\006\013\uffdb\014" +
    "\uffdb\001\002\000\004\036\155\001\002\000\014\011\uff78" +
    "\013\uff78\014\uff78\025\140\026\137\001\002\000\022\004" +
    "\127\005\107\010\130\036\112\046\111\047\106\053\114" +
    "\066\120\001\002\000\010\011\uff76\013\uff76\014\uff76\001" +
    "\002\000\042\011\uff87\013\uff87\014\uff87\016\uff87\017\uff87" +
    "\020\uff87\021\uff87\022\uff87\024\uff87\025\uff87\026\uff87\027" +
    "\uff87\030\uff87\031\uff87\032\uff87\034\uff87\001\002\000\016" +
    "\004\127\005\107\010\130\036\112\047\131\053\114\001" +
    "\002\000\042\011\uff84\013\uff84\014\uff84\016\uff84\017\uff84" +
    "\020\uff84\021\uff84\022\uff84\024\uff84\025\uff84\026\uff84\027" +
    "\uff84\030\uff84\031\uff84\032\uff84\034\uff84\001\002\000\004" +
    "\011\133\001\002\000\042\011\uff5d\013\uff5d\014\uff5d\016" +
    "\uff5d\017\uff5d\020\uff5d\021\uff5d\022\uff5d\024\uff5d\025\uff5d" +
    "\026\uff5d\027\uff5d\030\uff5d\031\uff5d\032\uff5d\034\uff5d\001" +
    "\002\000\010\011\uff74\013\uff74\014\uff74\001\002\000\010" +
    "\011\uff75\013\uff75\014\uff75\001\002\000\014\011\uff73\013" +
    "\uff73\014\uff73\025\140\026\137\001\002\000\022\004\127" +
    "\005\107\010\130\036\112\046\111\047\106\053\114\066" +
    "\120\001\002\000\022\004\127\005\107\010\130\036\112" +
    "\046\111\047\106\053\114\066\120\001\002\000\014\011" +
    "\uff58\013\uff58\014\uff58\025\143\026\142\001\002\000\026" +
    "\003\144\004\127\005\107\010\130\036\112\046\111\047" +
    "\106\051\125\053\114\066\120\001\002\000\026\003\144" +
    "\004\127\005\107\010\130\036\112\046\111\047\106\051" +
    "\125\053\114\066\120\001\002\000\004\011\146\001\002" +
    "\000\010\011\uff57\013\uff57\014\uff57\001\002\000\010\011" +
    "\uff72\013\uff72\014\uff72\001\002\000\010\011\uff56\013\uff56" +
    "\014\uff56\001\002\000\014\011\uff5b\013\uff5b\014\uff5b\025" +
    "\152\026\151\001\002\000\026\003\144\004\127\005\107" +
    "\010\130\036\112\046\111\047\106\051\125\053\114\066" +
    "\120\001\002\000\026\003\144\004\127\005\107\010\130" +
    "\036\112\046\111\047\106\051\125\053\114\066\120\001" +
    "\002\000\010\011\uff59\013\uff59\014\uff59\001\002\000\010" +
    "\011\uff5a\013\uff5a\014\uff5a\001\002\000\004\010\156\001" +
    "\002\000\032\003\144\004\127\005\107\010\130\011\162" +
    "\036\112\046\111\047\106\051\125\053\114\065\161\066" +
    "\120\001\002\000\004\011\177\001\002\000\006\011\uff3b" +
    "\013\175\001\002\000\004\036\163\001\002\000\006\013" +
    "\uffd9\014\uffd9\001\002\000\004\010\165\001\002\000\004" +
    "\011\uff3a\001\002\000\032\003\144\004\127\005\107\010" +
    "\130\011\167\036\112\046\111\047\106\051\125\053\114" +
    "\065\161\066\120\001\002\000\004\011\173\001\002\000" +
    "\006\011\uff36\013\170\001\002\000\030\003\144\004\127" +
    "\005\107\010\130\036\112\046\111\047\106\051\125\053" +
    "\114\065\161\066\120\001\002\000\004\011\uff38\001\002" +
    "\000\004\011\uff37\001\002\000\006\011\uff36\013\170\001" +
    "\002\000\004\011\uff39\001\002\000\030\003\144\004\127" +
    "\005\107\010\130\036\112\046\111\047\106\051\125\053" +
    "\114\065\161\066\120\001\002\000\004\011\uff3c\001\002" +
    "\000\006\013\uffda\014\uffda\001\002\000\006\013\uffd8\014" +
    "\uffd8\001\002\000\006\003\060\036\203\001\002\000\062" +
    "\003\uffe2\007\uffe2\015\uffe2\017\uffe2\020\uffe2\023\uffe2\033" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2" +
    "\045\uffe2\050\uffe2\052\uffe2\054\uffe2\055\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002\000\012" +
    "\003\064\013\062\014\067\023\065\001\002\000\062\003" +
    "\uffe1\007\uffe1\015\uffe1\017\uffe1\020\uffe1\023\uffe1\033\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1\045" +
    "\uffe1\050\uffe1\052\uffe1\054\uffe1\055\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\001\002\000\042\011" +
    "\uff8c\013\uff8c\014\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\034\uff8c\001\002\000\004\036\217\001\002" +
    "\000\004\011\216\001\002\000\032\003\144\004\127\005" +
    "\107\010\130\011\212\036\112\046\111\047\106\051\125" +
    "\053\114\065\161\066\120\001\002\000\004\011\214\001" +
    "\002\000\046\003\207\011\uff8b\012\206\013\uff8b\014\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\024\uff8b\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\034\uff8b" +
    "\001\002\000\042\011\uff89\013\uff89\014\uff89\016\uff89\017" +
    "\uff89\020\uff89\021\uff89\022\uff89\024\uff89\025\uff89\026\uff89" +
    "\027\uff89\030\uff89\031\uff89\032\uff89\034\uff89\001\002\000" +
    "\046\003\207\011\uff8a\012\206\013\uff8a\014\uff8a\016\uff8a" +
    "\017\uff8a\020\uff8a\021\uff8a\022\uff8a\024\uff8a\025\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\034\uff8a\001\002" +
    "\000\042\011\uff88\013\uff88\014\uff88\016\uff88\017\uff88\020" +
    "\uff88\021\uff88\022\uff88\024\uff88\025\uff88\026\uff88\027\uff88" +
    "\030\uff88\031\uff88\032\uff88\034\uff88\001\002\000\042\011" +
    "\uff7d\013\uff7d\014\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d" +
    "\022\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031" +
    "\uff7d\032\uff7d\034\uff7d\001\002\000\050\003\207\010\221" +
    "\011\uff80\012\206\013\uff80\014\uff80\016\uff80\017\uff80\020" +
    "\uff80\021\uff80\022\uff80\024\uff80\025\uff80\026\uff80\027\uff80" +
    "\030\uff80\031\uff80\032\uff80\034\uff80\001\002\000\042\011" +
    "\uff81\013\uff81\014\uff81\016\uff81\017\uff81\020\uff81\021\uff81" +
    "\022\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031" +
    "\uff81\032\uff81\034\uff81\001\002\000\032\003\144\004\127" +
    "\005\107\010\130\011\223\036\112\046\111\047\106\051" +
    "\125\053\114\065\161\066\120\001\002\000\004\011\225" +
    "\001\002\000\046\003\207\011\uff7e\012\206\013\uff7e\014" +
    "\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\024\uff7e" +
    "\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\034" +
    "\uff7e\001\002\000\042\011\uff83\013\uff83\014\uff83\016\uff83" +
    "\017\uff83\020\uff83\021\uff83\022\uff83\024\uff83\025\uff83\026" +
    "\uff83\027\uff83\030\uff83\031\uff83\032\uff83\034\uff83\001\002" +
    "\000\046\003\207\011\uff7f\012\206\013\uff7f\014\uff7f\016" +
    "\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\024\uff7f\025\uff7f" +
    "\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\034\uff7f\001" +
    "\002\000\042\011\uff82\013\uff82\014\uff82\016\uff82\017\uff82" +
    "\020\uff82\021\uff82\022\uff82\024\uff82\025\uff82\026\uff82\027" +
    "\uff82\030\uff82\031\uff82\032\uff82\034\uff82\001\002\000\016" +
    "\004\127\005\107\010\130\036\112\047\131\053\114\001" +
    "\002\000\016\004\127\005\107\010\130\036\112\047\131" +
    "\053\114\001\002\000\036\011\uff61\013\uff61\014\uff61\016" +
    "\uff61\017\uff61\020\uff61\024\uff61\025\uff61\026\uff61\027\uff61" +
    "\030\uff61\031\uff61\032\uff61\034\uff61\001\002\000\042\011" +
    "\uff5e\013\uff5e\014\uff5e\016\uff5e\017\uff5e\020\uff5e\021\227" +
    "\022\230\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e\031" +
    "\uff5e\032\uff5e\034\uff5e\001\002\000\036\011\uff5f\013\uff5f" +
    "\014\uff5f\016\uff5f\017\uff5f\020\uff5f\024\uff5f\025\uff5f\026" +
    "\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f\034\uff5f\001\002" +
    "\000\042\011\uff5e\013\uff5e\014\uff5e\016\uff5e\017\uff5e\020" +
    "\uff5e\021\227\022\230\024\uff5e\025\uff5e\026\uff5e\027\uff5e" +
    "\030\uff5e\031\uff5e\032\uff5e\034\uff5e\001\002\000\036\011" +
    "\uff60\013\uff60\014\uff60\016\uff60\017\uff60\020\uff60\024\uff60" +
    "\025\uff60\026\uff60\027\uff60\030\uff60\031\uff60\032\uff60\034" +
    "\uff60\001\002\000\004\010\237\001\002\000\032\003\144" +
    "\004\127\005\107\010\130\011\241\036\112\046\111\047" +
    "\106\051\125\053\114\065\161\066\120\001\002\000\004" +
    "\011\242\001\002\000\014\011\uff68\013\uff68\014\uff68\025" +
    "\uff68\026\uff68\001\002\000\014\011\uff67\013\uff67\014\uff67" +
    "\025\uff67\026\uff67\001\002\000\016\004\127\005\107\010" +
    "\130\036\112\047\131\053\114\001\002\000\016\004\127" +
    "\005\107\010\130\036\112\047\131\053\114\001\002\000" +
    "\032\011\uff65\013\uff65\014\uff65\016\uff65\024\uff65\025\uff65" +
    "\026\uff65\027\uff65\030\uff65\031\uff65\032\uff65\034\uff65\001" +
    "\002\000\036\011\uff62\013\uff62\014\uff62\016\uff62\017\244" +
    "\020\243\024\uff62\025\uff62\026\uff62\027\uff62\030\uff62\031" +
    "\uff62\032\uff62\034\uff62\001\002\000\032\011\uff63\013\uff63" +
    "\014\uff63\016\uff63\024\uff63\025\uff63\026\uff63\027\uff63\030" +
    "\uff63\031\uff63\032\uff63\034\uff63\001\002\000\036\011\uff62" +
    "\013\uff62\014\uff62\016\uff62\017\244\020\243\024\uff62\025" +
    "\uff62\026\uff62\027\uff62\030\uff62\031\uff62\032\uff62\034\uff62" +
    "\001\002\000\032\011\uff64\013\uff64\014\uff64\016\uff64\024" +
    "\uff64\025\uff64\026\uff64\027\uff64\030\uff64\031\uff64\032\uff64" +
    "\034\uff64\001\002\000\016\004\127\005\107\010\130\036" +
    "\112\047\131\053\114\001\002\000\016\004\127\005\107" +
    "\010\130\036\112\047\131\053\114\001\002\000\016\004" +
    "\127\005\107\010\130\036\112\047\131\053\114\001\002" +
    "\000\016\004\127\005\107\010\130\036\112\047\131\053" +
    "\114\001\002\000\016\004\127\005\107\010\130\036\112" +
    "\047\131\053\114\001\002\000\016\004\127\005\107\010" +
    "\130\036\112\047\131\053\114\001\002\000\014\011\uff6f" +
    "\013\uff6f\014\uff6f\025\uff6f\026\uff6f\001\002\000\016\011" +
    "\uff66\013\uff66\014\uff66\016\uff66\025\uff66\026\uff66\001\002" +
    "\000\014\011\uff6d\013\uff6d\014\uff6d\025\uff6d\026\uff6d\001" +
    "\002\000\014\011\uff6e\013\uff6e\014\uff6e\025\uff6e\026\uff6e" +
    "\001\002\000\014\011\uff70\013\uff70\014\uff70\025\uff70\026" +
    "\uff70\001\002\000\014\011\uff6c\013\uff6c\014\uff6c\025\uff6c" +
    "\026\uff6c\001\002\000\014\011\uff71\013\uff71\014\uff71\025" +
    "\uff71\026\uff71\001\002\000\062\003\uffde\007\uffde\015\uffde" +
    "\017\uffde\020\uffde\023\uffde\033\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\044\uffde\045\uffde\050\uffde\052\uffde" +
    "\054\uffde\055\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063" +
    "\uffde\064\uffde\001\002\000\062\003\uffe0\007\uffe0\015\uffe0" +
    "\017\uffe0\020\uffe0\023\uffe0\033\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\044\uffe0\045\uffe0\050\uffe0\052\uffe0" +
    "\054\uffe0\055\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\001\002\000\014\003\064\010\277\013\062" +
    "\014\067\023\065\001\002\000\032\003\uffe8\007\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\044\uffe8\045\uffe8" +
    "\050\uffe8\052\uffe8\054\uffe8\001\002\000\022\003\073\011" +
    "\274\036\072\044\030\045\034\050\036\052\031\054\047" +
    "\001\002\000\004\006\uff47\001\002\000\004\011\276\001" +
    "\002\000\004\006\uff48\001\002\000\022\003\073\011\300" +
    "\036\072\044\030\045\034\050\036\052\031\054\047\001" +
    "\002\000\004\006\uffed\001\002\000\004\011\302\001\002" +
    "\000\004\006\uffec\001\002\000\042\003\324\007\uffce\036" +
    "\313\042\323\044\030\045\034\050\036\052\031\054\047" +
    "\055\312\057\327\060\306\061\317\062\310\063\322\064" +
    "\307\001\002\000\052\003\uffc7\007\uffc7\017\uffc7\020\uffc7" +
    "\023\uffc7\036\uffc7\042\uffc7\044\uffc7\045\uffc7\050\uffc7\052" +
    "\uffc7\054\uffc7\055\uffc7\056\u0169\057\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\001\002\000\004\007\u017d\001" +
    "\002\000\004\010\u0177\001\002\000\030\003\144\004\127" +
    "\005\107\010\130\014\uff79\036\112\046\111\047\106\051" +
    "\125\053\114\066\120\001\002\000\004\010\u014d\001\002" +
    "\000\050\003\uffc0\007\uffc0\017\uffc0\020\uffc0\023\uffc0\036" +
    "\uffc0\042\uffc0\044\uffc0\045\uffc0\050\uffc0\052\uffc0\054\uffc0" +
    "\055\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\001\002\000\004\010\u0147\001\002\000\020\003\u0114" +
    "\010\u010f\012\u010e\017\u010d\020\u0110\023\u0113\036\203\001" +
    "\002\000\050\003\uffc5\007\uffc5\017\uffc5\020\uffc5\023\uffc5" +
    "\036\uffc5\042\uffc5\044\uffc5\045\uffc5\050\uffc5\052\uffc5\054" +
    "\uffc5\055\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\001\002\000\050\003\uffc4\007\uffc4\017\uffc4\020" +
    "\uffc4\023\uffc4\036\uffc4\042\uffc4\044\uffc4\045\uffc4\050\uffc4" +
    "\052\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\001\002\000\050\003\uffc3\007\uffc3" +
    "\017\uffc3\020\uffc3\023\uffc3\036\uffc3\042\uffc3\044\uffc3\045" +
    "\uffc3\050\uffc3\052\uffc3\054\uffc3\055\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002\000\004\006" +
    "\u0103\001\002\000\050\003\uffc6\007\uffc6\017\uffc6\020\uffc6" +
    "\023\uffc6\036\uffc6\042\uffc6\044\uffc6\045\uffc6\050\uffc6\052" +
    "\uffc6\054\uffc6\055\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\001\002\000\050\003\324\007\uffce\017" +
    "\uffce\020\uffce\023\uffce\036\313\042\323\044\030\045\034" +
    "\050\036\052\031\054\047\055\312\057\327\060\306\061" +
    "\317\062\310\063\322\064\307\001\002\000\004\014\u0101" +
    "\001\002\000\016\036\376\044\030\045\034\050\036\052" +
    "\031\054\047\001\002\000\050\003\324\007\uffce\017\uffce" +
    "\020\uffce\023\uffce\036\313\042\323\044\030\045\034\050" +
    "\036\052\031\054\047\055\312\057\327\060\306\061\317" +
    "\062\310\063\322\064\307\001\002\000\050\003\uffc1\007" +
    "\uffc1\017\uffc1\020\uffc1\023\uffc1\036\uffc1\042\uffc1\044\uffc1" +
    "\045\uffc1\050\uffc1\052\uffc1\054\uffc1\055\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\001\002\000\050" +
    "\003\uffbd\007\uffbd\017\uffbd\020\uffbd\023\uffbd\036\uffbd\042" +
    "\uffbd\044\uffbd\045\uffbd\050\uffbd\052\uffbd\054\uffbd\055\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\001" +
    "\002\000\004\010\330\001\002\000\010\036\uff50\044\334" +
    "\054\332\001\002\000\004\011\371\001\002\000\004\036" +
    "\uff51\001\002\000\004\036\335\001\002\000\004\036\uff52" +
    "\001\002\000\004\023\336\001\002\000\010\004\341\005" +
    "\340\036\337\001\002\000\004\014\365\001\002\000\004" +
    "\014\361\001\002\000\004\014\342\001\002\000\026\003" +
    "\144\004\127\005\107\010\130\036\112\046\111\047\106" +
    "\051\125\053\114\066\120\001\002\000\004\014\344\001" +
    "\002\000\004\036\345\001\002\000\010\017\351\020\347" +
    "\023\350\001\002\000\004\011\uff54\001\002\000\006\020" +
    "\356\023\357\001\002\000\026\003\144\004\127\005\107" +
    "\010\130\036\112\046\111\047\106\051\125\053\114\066" +
    "\120\001\002\000\006\017\353\023\352\001\002\000\026" +
    "\003\144\004\127\005\107\010\130\036\112\046\111\047" +
    "\106\051\125\053\114\066\120\001\002\000\004\011\uff4e" +
    "\001\002\000\004\011\uff4b\001\002\000\004\011\uff4d\001" +
    "\002\000\004\011\uff4f\001\002\000\026\003\144\004\127" +
    "\005\107\010\130\036\112\046\111\047\106\051\125\053" +
    "\114\066\120\001\002\000\004\011\uff4c\001\002\000\026" +
    "\003\144\004\127\005\107\010\130\036\112\046\111\047" +
    "\106\051\125\053\114\066\120\001\002\000\004\014\363" +
    "\001\002\000\004\036\345\001\002\000\004\011\uff53\001" +
    "\002\000\026\003\144\004\127\005\107\010\130\036\112" +
    "\046\111\047\106\051\125\053\114\066\120\001\002\000" +
    "\004\014\367\001\002\000\004\036\345\001\002\000\004" +
    "\011\uff55\001\002\000\004\006\372\001\002\000\042\003" +
    "\324\007\uffce\036\313\042\323\044\030\045\034\050\036" +
    "\052\031\054\047\055\312\057\327\060\306\061\317\062" +
    "\310\063\322\064\307\001\002\000\004\007\374\001\002" +
    "\000\054\003\uffa4\007\uffa4\015\uffa4\017\uffa4\020\uffa4\023" +
    "\uffa4\033\uffa4\036\uffa4\042\uffa4\044\uffa4\045\uffa4\050\uffa4" +
    "\052\uffa4\054\uffa4\055\uffa4\057\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\001\002\000\012\007\uffcd\017\uffcd" +
    "\020\uffcd\023\uffcd\001\002\000\006\003\060\036\203\001" +
    "\002\000\050\003\uffc2\007\uffc2\017\uffc2\020\uffc2\023\uffc2" +
    "\036\uffc2\042\uffc2\044\uffc2\045\uffc2\050\uffc2\052\uffc2\054" +
    "\uffc2\055\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\001\002\000\050\003\uffbc\007\uffbc\017\uffbc\020" +
    "\uffbc\023\uffbc\036\uffbc\042\uffbc\044\uffbc\045\uffbc\050\uffbc" +
    "\052\uffbc\054\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\001\002\000\054\003\uff7c\007\uff7c" +
    "\015\uff7c\017\uff7c\020\uff7c\023\uff7c\033\uff7c\036\uff7c\042" +
    "\uff7c\044\uff7c\045\uff7c\050\uff7c\052\uff7c\054\uff7c\055\uff7c" +
    "\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\001" +
    "\002\000\012\007\uffcf\017\uffcf\020\uffcf\023\uffcf\001\002" +
    "\000\042\003\324\007\uffce\036\313\042\323\044\030\045" +
    "\034\050\036\052\031\054\047\055\312\057\327\060\306" +
    "\061\317\062\310\063\322\064\307\001\002\000\004\007" +
    "\u0105\001\002\000\004\060\u0106\001\002\000\004\010\u0107" +
    "\001\002\000\026\003\144\004\127\005\107\010\130\036" +
    "\112\046\111\047\106\051\125\053\114\066\120\001\002" +
    "\000\004\011\u0109\001\002\000\004\014\u010a\001\002\000" +
    "\054\003\uffa2\007\uffa2\015\uffa2\017\uffa2\020\uffa2\023\uffa2" +
    "\033\uffa2\036\uffa2\042\uffa2\044\uffa2\045\uffa2\050\uffa2\052" +
    "\uffa2\054\uffa2\055\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2" +
    "\063\uffa2\064\uffa2\001\002\000\004\014\u0146\001\002\000" +
    "\030\003\121\004\127\005\107\010\130\036\112\046\111" +
    "\047\106\051\125\053\114\065\123\066\120\001\002\000" +
    "\004\017\u0142\001\002\000\004\036\u0137\001\002\000\032" +
    "\003\144\004\127\005\107\010\130\011\u0125\036\112\046" +
    "\111\047\106\051\125\053\114\065\161\066\120\001\002" +
    "\000\006\020\u0122\023\u0120\001\002\000\050\003\uffbe\007" +
    "\uffbe\017\uffbe\020\uffbe\023\uffbe\036\uffbe\042\uffbe\044\uffbe" +
    "\045\uffbe\050\uffbe\052\uffbe\054\uffbe\055\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\001\002\000\010" +
    "\017\u011a\020\u0118\023\u0113\001\002\000\030\003\uffac\004" +
    "\uffac\005\uffac\010\uffac\036\uffac\046\uffac\047\uffac\051\uffac" +
    "\053\uffac\065\uffac\066\uffac\001\002\000\050\003\324\014" +
    "\061\017\uffce\020\uffce\023\uffce\036\313\042\323\044\030" +
    "\045\034\050\036\052\031\054\047\055\312\057\327\060" +
    "\306\061\317\062\310\063\322\064\307\001\002\000\054" +
    "\003\uffbb\007\uffbb\015\uffbb\017\uffbb\020\uffbb\023\uffbb\033" +
    "\uffbb\036\uffbb\042\uffbb\044\uffbb\045\uffbb\050\uffbb\052\uffbb" +
    "\054\uffbb\055\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\064\uffbb\001\002\000\050\003\uffbf\007\uffbf\017\uffbf" +
    "\020\uffbf\023\uffbf\036\uffbf\042\uffbf\044\uffbf\045\uffbf\050" +
    "\uffbf\052\uffbf\054\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf" +
    "\062\uffbf\063\uffbf\064\uffbf\001\002\000\010\017\uffad\020" +
    "\uffad\023\uffad\001\002\000\006\020\u011f\023\u0120\001\002" +
    "\000\030\003\121\004\127\005\107\010\130\036\112\046" +
    "\111\047\106\051\125\053\114\065\123\066\120\001\002" +
    "\000\004\017\u011b\001\002\000\004\014\u011c\001\002\000" +
    "\054\003\uffa7\007\uffa7\015\uffa7\017\uffa7\020\uffa7\023\uffa7" +
    "\033\uffa7\036\uffa7\042\uffa7\044\uffa7\045\uffa7\050\uffa7\052" +
    "\uffa7\054\uffa7\055\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7" +
    "\063\uffa7\064\uffa7\001\002\000\004\014\u011e\001\002\000" +
    "\054\003\uffba\007\uffba\015\uffba\017\uffba\020\uffba\023\uffba" +
    "\033\uffba\036\uffba\042\uffba\044\uffba\045\uffba\050\uffba\052" +
    "\uffba\054\uffba\055\uffba\057\uffba\060\uffba\061\uffba\062\uffba" +
    "\063\uffba\064\uffba\001\002\000\004\014\u0121\001\002\000" +
    "\030\003\uffab\004\uffab\005\uffab\010\uffab\036\uffab\046\uffab" +
    "\047\uffab\051\uffab\053\uffab\065\uffab\066\uffab\001\002\000" +
    "\054\003\uffa8\007\uffa8\015\uffa8\017\uffa8\020\uffa8\023\uffa8" +
    "\033\uffa8\036\uffa8\042\uffa8\044\uffa8\045\uffa8\050\uffa8\052" +
    "\uffa8\054\uffa8\055\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\063\uffa8\064\uffa8\001\002\000\004\014\u0123\001\002\000" +
    "\054\003\uffaa\007\uffaa\015\uffaa\017\uffaa\020\uffaa\023\uffaa" +
    "\033\uffaa\036\uffaa\042\uffaa\044\uffaa\045\uffaa\050\uffaa\052" +
    "\uffaa\054\uffaa\055\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\063\uffaa\064\uffaa\001\002\000\004\011\u012f\001\002\000" +
    "\010\003\u0127\012\u010e\014\u0129\001\002\000\004\014\u012e" +
    "\001\002\000\046\003\324\017\uffce\020\uffce\023\uffce\036" +
    "\313\042\323\044\030\045\034\050\036\052\031\054\047" +
    "\055\312\057\327\060\306\061\317\062\310\063\322\064" +
    "\307\001\002\000\006\020\u012a\023\u0113\001\002\000\054" +
    "\003\uffb5\007\uffb5\015\uffb5\017\uffb5\020\uffb5\023\uffb5\033" +
    "\uffb5\036\uffb5\042\uffb5\044\uffb5\045\uffb5\050\uffb5\052\uffb5" +
    "\054\uffb5\055\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063" +
    "\uffb5\064\uffb5\001\002\000\004\023\u0120\001\002\000\030" +
    "\003\121\004\127\005\107\010\130\036\112\046\111\047" +
    "\106\051\125\053\114\065\123\066\120\001\002\000\004" +
    "\014\u012d\001\002\000\054\003\uffb9\007\uffb9\015\uffb9\017" +
    "\uffb9\020\uffb9\023\uffb9\033\uffb9\036\uffb9\042\uffb9\044\uffb9" +
    "\045\uffb9\050\uffb9\052\uffb9\054\uffb9\055\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\001\002\000\054" +
    "\003\uffb3\007\uffb3\015\uffb3\017\uffb3\020\uffb3\023\uffb3\033" +
    "\uffb3\036\uffb3\042\uffb3\044\uffb3\045\uffb3\050\uffb3\052\uffb3" +
    "\054\uffb3\055\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\001\002\000\010\003\u0127\012\u010e\014\u0132" +
    "\001\002\000\004\014\u0136\001\002\000\006\020\u012a\023" +
    "\u0113\001\002\000\054\003\uffb4\007\uffb4\015\uffb4\017\uffb4" +
    "\020\uffb4\023\uffb4\033\uffb4\036\uffb4\042\uffb4\044\uffb4\045" +
    "\uffb4\050\uffb4\052\uffb4\054\uffb4\055\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\064\uffb4\001\002\000\030\003" +
    "\121\004\127\005\107\010\130\036\112\046\111\047\106" +
    "\051\125\053\114\065\123\066\120\001\002\000\004\014" +
    "\u0135\001\002\000\054\003\uffb8\007\uffb8\015\uffb8\017\uffb8" +
    "\020\uffb8\023\uffb8\033\uffb8\036\uffb8\042\uffb8\044\uffb8\045" +
    "\uffb8\050\uffb8\052\uffb8\054\uffb8\055\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\063\uffb8\064\uffb8\001\002\000\054\003" +
    "\uffb2\007\uffb2\015\uffb2\017\uffb2\020\uffb2\023\uffb2\033\uffb2" +
    "\036\uffb2\042\uffb2\044\uffb2\045\uffb2\050\uffb2\052\uffb2\054" +
    "\uffb2\055\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\001\002\000\016\003\u0127\010\u013a\012\u010e\017" +
    "\uffae\020\uffae\023\uffae\001\002\000\004\014\uff3f\001\002" +
    "\000\010\017\uffaf\020\uffaf\023\uffaf\001\002\000\032\003" +
    "\144\004\127\005\107\010\130\011\u013c\036\112\046\111" +
    "\047\106\051\125\053\114\065\161\066\120\001\002\000" +
    "\004\011\u013f\001\002\000\010\003\u0127\012\u010e\014\uff3d" +
    "\001\002\000\004\014\uff41\001\002\000\010\017\uffb1\020" +
    "\uffb1\023\uffb1\001\002\000\010\003\u0127\012\u010e\014\uff3e" +
    "\001\002\000\004\014\uff40\001\002\000\010\017\uffb0\020" +
    "\uffb0\023\uffb0\001\002\000\004\014\u0143\001\002\000\054" +
    "\003\uffa9\007\uffa9\015\uffa9\017\uffa9\020\uffa9\023\uffa9\033" +
    "\uffa9\036\uffa9\042\uffa9\044\uffa9\045\uffa9\050\uffa9\052\uffa9" +
    "\054\uffa9\055\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\001\002\000\004\014\u0145\001\002\000\054" +
    "\003\uffb7\007\uffb7\015\uffb7\017\uffb7\020\uffb7\023\uffb7\033" +
    "\uffb7\036\uffb7\042\uffb7\044\uffb7\045\uffb7\050\uffb7\052\uffb7" +
    "\054\uffb7\055\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\001\002\000\054\003\uffb6\007\uffb6\015\uffb6" +
    "\017\uffb6\020\uffb6\023\uffb6\033\uffb6\036\uffb6\042\uffb6\044" +
    "\uffb6\045\uffb6\050\uffb6\052\uffb6\054\uffb6\055\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\001\002\000" +
    "\026\003\144\004\127\005\107\010\130\036\112\046\111" +
    "\047\106\051\125\053\114\066\120\001\002\000\004\011" +
    "\u0149\001\002\000\004\006\u014a\001\002\000\042\003\324" +
    "\007\uffce\036\313\042\323\044\030\045\034\050\036\052" +
    "\031\054\047\055\312\057\327\060\306\061\317\062\310" +
    "\063\322\064\307\001\002\000\004\007\u014c\001\002\000" +
    "\056\003\uffa6\007\uffa6\015\uffa6\017\uffa6\020\uffa6\023\uffa6" +
    "\033\uffa6\036\uffa6\042\uffa6\044\uffa6\045\uffa6\050\uffa6\052" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\001\002\000\004\036\u014e\001" +
    "\002\000\004\011\u014f\001\002\000\004\006\u0150\001\002" +
    "\000\012\003\u0152\007\uff9e\015\u0151\033\u0155\001\002\000" +
    "\004\016\u0172\001\002\000\004\033\u0171\001\002\000\004" +
    "\007\u0170\001\002\000\016\003\u0152\007\uff9e\015\u0151\033" +
    "\u0155\063\322\064\307\001\002\000\016\004\127\005\107" +
    "\010\130\036\112\047\131\053\114\001\002\000\004\016" +
    "\u0157\001\002\000\046\003\uff99\007\uff99\015\uff99\033\uff99" +
    "\036\u015a\042\u0160\044\030\045\034\050\036\052\031\054" +
    "\047\055\312\057\327\060\306\061\317\062\310\063\uff99" +
    "\064\uff99\001\002\000\050\003\uff98\007\uff98\015\uff98\033" +
    "\uff98\036\uff98\042\uff98\044\uff98\045\uff98\050\uff98\052\uff98" +
    "\054\uff98\055\uff98\056\u0169\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\063\uff98\064\uff98\001\002\000\046\003\uff92\007\uff92" +
    "\015\uff92\033\uff92\036\uff92\042\uff92\044\uff92\045\uff92\050" +
    "\uff92\052\uff92\054\uff92\055\uff92\057\uff92\060\uff92\061\uff92" +
    "\062\uff92\063\uff92\064\uff92\001\002\000\020\003\u0114\010" +
    "\u010f\012\u010e\017\u010d\020\u0110\023\u0113\036\203\001\002" +
    "\000\046\003\uff96\007\uff96\015\uff96\033\uff96\036\uff96\042" +
    "\uff96\044\uff96\045\uff96\050\uff96\052\uff96\054\uff96\055\uff96" +
    "\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\001" +
    "\002\000\046\003\uff95\007\uff95\015\uff95\033\uff95\036\uff95" +
    "\042\uff95\044\uff95\045\uff95\050\uff95\052\uff95\054\uff95\055" +
    "\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95" +
    "\001\002\000\046\003\uff94\007\uff94\015\uff94\033\uff94\036" +
    "\uff94\042\uff94\044\uff94\045\uff94\050\uff94\052\uff94\054\uff94" +
    "\055\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064" +
    "\uff94\001\002\000\046\003\uff97\007\uff97\015\uff97\033\uff97" +
    "\036\uff97\042\uff97\044\uff97\045\uff97\050\uff97\052\uff97\054" +
    "\uff97\055\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97" +
    "\064\uff97\001\002\000\016\003\uff9c\007\uff9c\015\uff9c\033" +
    "\uff9c\063\uff9c\064\uff9c\001\002\000\016\036\u0164\044\030" +
    "\045\034\050\036\052\031\054\047\001\002\000\046\003" +
    "\uff99\007\uff99\015\uff99\033\uff99\036\u015a\042\u0160\044\030" +
    "\045\034\050\036\052\031\054\047\055\312\057\327\060" +
    "\306\061\317\062\310\063\uff99\064\uff99\001\002\000\046" +
    "\003\uff8f\007\uff8f\015\uff8f\033\uff8f\036\uff8f\042\uff8f\044" +
    "\uff8f\045\uff8f\050\uff8f\052\uff8f\054\uff8f\055\uff8f\057\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\001\002\000" +
    "\016\003\uff9a\007\uff9a\015\uff9a\033\uff9a\063\uff9a\064\uff9a" +
    "\001\002\000\006\003\060\036\203\001\002\000\046\003" +
    "\uff93\007\uff93\015\uff93\033\uff93\036\uff93\042\uff93\044\uff93" +
    "\045\uff93\050\uff93\052\uff93\054\uff93\055\uff93\057\uff93\060" +
    "\uff93\061\uff93\062\uff93\063\uff93\064\uff93\001\002\000\046" +
    "\003\uff8e\007\uff8e\015\uff8e\033\uff8e\036\uff8e\042\uff8e\044" +
    "\uff8e\045\uff8e\050\uff8e\052\uff8e\054\uff8e\055\uff8e\057\uff8e" +
    "\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\001\002\000" +
    "\046\003\uff90\007\uff90\015\uff90\033\uff90\036\uff90\042\uff90" +
    "\044\uff90\045\uff90\050\uff90\052\uff90\054\uff90\055\uff90\057" +
    "\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\001\002" +
    "\000\046\003\uff91\007\uff91\015\uff91\033\uff91\036\uff91\042" +
    "\uff91\044\uff91\045\uff91\050\uff91\052\uff91\054\uff91\055\uff91" +
    "\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\001" +
    "\002\000\004\006\u016a\001\002\000\042\003\324\007\uffce" +
    "\036\313\042\323\044\030\045\034\050\036\052\031\054" +
    "\047\055\312\057\327\060\306\061\317\062\310\063\322" +
    "\064\307\001\002\000\004\007\u016c\001\002\000\054\003" +
    "\uffa5\007\uffa5\015\uffa5\017\uffa5\020\uffa5\023\uffa5\033\uffa5" +
    "\036\uffa5\042\uffa5\044\uffa5\045\uffa5\050\uffa5\052\uffa5\054" +
    "\uffa5\055\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\064\uffa5\001\002\000\004\007\uff9f\001\002\000\012\003" +
    "\u0152\007\uff9e\015\u0151\033\u0155\001\002\000\004\007\uffa0" +
    "\001\002\000\054\003\uffa1\007\uffa1\015\uffa1\017\uffa1\020" +
    "\uffa1\023\uffa1\033\uffa1\036\uffa1\042\uffa1\044\uffa1\045\uffa1" +
    "\050\uffa1\052\uffa1\054\uffa1\055\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\001\002\000\004\007\uff9d" +
    "\001\002\000\046\003\uff99\007\uff99\015\uff99\033\uff99\036" +
    "\u015a\042\u0160\044\030\045\034\050\036\052\031\054\047" +
    "\055\312\057\327\060\306\061\317\062\310\063\uff99\064" +
    "\uff99\001\002\000\016\003\uff9b\007\uff9b\015\uff9b\033\uff9b" +
    "\063\uff9b\064\uff9b\001\002\000\004\014\u0176\001\002\000" +
    "\004\014\uff7a\001\002\000\054\003\uff7b\007\uff7b\015\uff7b" +
    "\017\uff7b\020\uff7b\023\uff7b\033\uff7b\036\uff7b\042\uff7b\044" +
    "\uff7b\045\uff7b\050\uff7b\052\uff7b\054\uff7b\055\uff7b\057\uff7b" +
    "\060\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\001\002\000" +
    "\026\003\144\004\127\005\107\010\130\036\112\046\111" +
    "\047\106\051\125\053\114\066\120\001\002\000\004\011" +
    "\u0179\001\002\000\004\006\u017a\001\002\000\042\003\324" +
    "\007\uffce\036\313\042\323\044\030\045\034\050\036\052" +
    "\031\054\047\055\312\057\327\060\306\061\317\062\310" +
    "\063\322\064\307\001\002\000\004\007\u017c\001\002\000" +
    "\054\003\uffa3\007\uffa3\015\uffa3\017\uffa3\020\uffa3\023\uffa3" +
    "\033\uffa3\036\uffa3\042\uffa3\044\uffa3\045\uffa3\050\uffa3\052" +
    "\uffa3\054\uffa3\055\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\063\uffa3\064\uffa3\001\002\000\032\003\uff4a\007\uff4a\036" +
    "\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\044\uff4a\045\uff4a" +
    "\050\uff4a\052\uff4a\054\uff4a\001\002\000\042\003\324\007" +
    "\uffce\036\313\042\323\044\030\045\034\050\036\052\031" +
    "\054\047\055\312\057\327\060\306\061\317\062\310\063" +
    "\322\064\307\001\002\000\004\007\u0180\001\002\000\032" +
    "\003\ufff1\007\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\044\ufff1\045\ufff1\050\ufff1\052\ufff1\054\ufff1\001\002" +
    "\000\006\003\060\036\203\001\002\000\032\003\uffe9\007" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\044\uffe9" +
    "\045\uffe9\050\uffe9\052\uffe9\054\uffe9\001\002\000\032\003" +
    "\uffe7\007\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\044\uffe7\045\uffe7\050\uffe7\052\uffe7\054\uffe7\001\002\000" +
    "\032\003\ufff0\007\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\044\ufff0\045\ufff0\050\ufff0\052\ufff0\054\ufff0\001" +
    "\002\000\042\003\324\007\uffce\036\313\042\323\044\030" +
    "\045\034\050\036\052\031\054\047\055\312\057\327\060" +
    "\306\061\317\062\310\063\322\064\307\001\002\000\004" +
    "\007\u0187\001\002\000\032\003\uff49\007\uff49\036\uff49\037" +
    "\uff49\040\uff49\041\uff49\042\uff49\044\uff49\045\uff49\050\uff49" +
    "\052\uff49\054\uff49\001\002\000\004\002\ufff4\001\002\000" +
    "\032\003\uffe6\007\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\044\uffe6\045\uffe6\050\uffe6\052\uffe6\054\uffe6\001" +
    "\002\000\020\036\uffd2\043\uffd2\044\uffd2\045\uffd2\050\uffd2" +
    "\052\uffd2\054\uffd2\001\002\000\004\006\ufff2\001\002\000" +
    "\032\003\040\007\uffcb\036\033\037\022\040\020\041\015" +
    "\042\041\044\030\045\034\050\036\052\031\054\047\001" +
    "\002\000\004\007\u018e\001\002\000\004\002\ufff3\001\002" +
    "\000\020\036\uffd1\043\uffd1\044\uffd1\045\uffd1\050\uffd1\052" +
    "\uffd1\054\uffd1\001\002\000\004\006\u0191\001\002\000\032" +
    "\003\040\007\uffcb\036\033\037\022\040\020\041\015\042" +
    "\041\044\030\045\034\050\036\052\031\054\047\001\002" +
    "\000\004\007\u0193\001\002\000\004\002\ufff5\001\002\000" +
    "\006\012\u0195\014\u0196\001\002\000\010\003\u019b\021\u0199" +
    "\036\u019a\001\002\000\020\003\u0198\035\004\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\001\002\000\014\037\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\043\ufffc\001\002\000\004\014" +
    "\012\001\002\000\004\014\u01a2\001\002\000\006\012\u019e" +
    "\014\u019f\001\002\000\004\014\u019d\001\002\000\014\037" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\001\002\000\014" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\001\002\000" +
    "\010\003\u019b\021\u0199\036\u019a\001\002\000\020\003\u0198" +
    "\035\004\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\001" +
    "\002\000\014\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\001\002\000\014\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\001\002\000\020\003\u0198\035\004\037\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\001\002\000\014\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\006\002\006\004\004\001\001\000\002\001" +
    "\001\000\010\005\013\016\012\070\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\u018f\001\001\000\002" +
    "\001\001\000\004\013\u018e\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0189\001\001\000\004\070\024" +
    "\001\001\000\004\013\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\045\007\043" +
    "\010\031\015\026\016\041\021\034\022\044\050\042\073" +
    "\036\001\001\000\004\011\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0188\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\u0181\015" +
    "\026\001\001\000\012\010\054\015\053\071\050\073\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\045\007\043\010\031\015\026\016\041\021\047\022\044" +
    "\050\042\073\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\271\001\001\000\004\011\056\001\001\000" +
    "\002\001\001\000\004\012\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\014\112" +
    "\035\114\040\121\041\123\043\103\044\116\045\125\063" +
    "\115\064\104\067\107\001\001\000\010\015\073\051\074" +
    "\072\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\073" +
    "\051\102\072\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\230\001\001\000\002\001\001\000" +
    "\004\026\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\035\114\041\135\043" +
    "\103\044\134\045\133\063\115\064\104\067\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\035\114\063" +
    "\131\064\104\067\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\035\114\041\147\043\103" +
    "\063\115\064\104\067\107\001\001\000\016\035\114\041" +
    "\140\043\103\063\115\064\104\067\107\001\001\000\002" +
    "\001\001\000\024\035\114\040\146\041\123\043\103\044" +
    "\116\045\125\063\115\064\104\067\107\001\001\000\024" +
    "\035\114\040\144\041\123\043\103\044\116\045\125\063" +
    "\115\064\104\067\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\035\114\040\153\041\123\043\103\044\116" +
    "\045\125\063\115\064\104\067\107\001\001\000\024\035" +
    "\114\040\152\041\123\043\103\044\116\045\125\063\115" +
    "\064\104\067\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\035\114\040\157\041\123" +
    "\043\103\044\116\045\125\053\156\063\115\064\104\067" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\035\114\040\157\041\123\043\103" +
    "\044\116\045\125\053\165\063\115\064\104\067\107\001" +
    "\001\000\002\001\001\000\004\061\170\001\001\000\026" +
    "\035\114\040\157\041\123\043\103\044\116\045\125\053" +
    "\171\063\115\064\104\067\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\173\001\001\000\002\001" +
    "\001\000\026\035\114\040\157\041\123\043\103\044\116" +
    "\045\125\053\175\063\115\064\104\067\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\203\001\001\000\002\001\001\000\004\012\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\035\114\040\157\041\123\043" +
    "\103\044\116\045\125\053\210\063\115\064\104\067\107" +
    "\001\001\000\002\001\001\000\004\026\212\001\001\000" +
    "\002\001\001\000\004\026\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\217\001\001\000\002\001" +
    "\001\000\026\035\114\040\157\041\123\043\103\044\116" +
    "\045\125\053\221\063\115\064\104\067\107\001\001\000" +
    "\002\001\001\000\004\026\223\001\001\000\002\001\001" +
    "\000\004\026\225\001\001\000\002\001\001\000\006\035" +
    "\114\067\233\001\001\000\006\035\114\067\231\001\001" +
    "\000\002\001\001\000\004\066\232\001\001\000\002\001" +
    "\001\000\004\066\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\035\114\040\157\041\123\043\103\044" +
    "\116\045\125\053\237\063\115\064\104\067\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\035\114\064\247\067\107\001\001\000\010\035\114" +
    "\064\245\067\107\001\001\000\002\001\001\000\004\065" +
    "\246\001\001\000\002\001\001\000\004\065\250\001\001" +
    "\000\002\001\001\000\014\035\114\043\265\063\260\064" +
    "\104\067\107\001\001\000\014\035\114\043\264\063\260" +
    "\064\104\067\107\001\001\000\014\035\114\043\263\063" +
    "\260\064\104\067\107\001\001\000\014\035\114\043\262" +
    "\063\260\064\104\067\107\001\001\000\014\035\114\043" +
    "\261\063\260\064\104\067\107\001\001\000\014\035\114" +
    "\043\257\063\260\064\104\067\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\062\001\001" +
    "\000\002\001\001\000\010\015\073\051\274\072\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\073\051\300\072\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\010\310" +
    "\015\026\017\304\020\320\023\303\024\317\025\315\027" +
    "\313\030\314\031\325\036\324\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\035\114\037" +
    "\u0173\040\u0174\041\123\043\103\044\116\045\125\063\115" +
    "\064\104\067\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\u0110\052\u010a\055\u0114" +
    "\056\u010b\057\u0111\060\u0115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\010\310\015\026\017\u0101\020\320\023" +
    "\303\024\317\025\315\027\313\030\314\031\325\036\324" +
    "\001\001\000\002\001\001\000\006\010\376\015\026\001" +
    "\001\000\030\010\310\015\026\017\374\020\320\023\303" +
    "\024\317\025\315\027\313\030\314\031\325\036\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\046\330\062\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\035\114\040\342\041\123" +
    "\043\103\044\116\045\125\063\115\064\104\067\107\001" +
    "\001\000\002\001\001\000\004\047\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\035" +
    "\114\040\354\041\123\043\103\044\116\045\125\063\115" +
    "\064\104\067\107\001\001\000\002\001\001\000\024\035" +
    "\114\040\353\041\123\043\103\044\116\045\125\063\115" +
    "\064\104\067\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\035\114" +
    "\040\357\041\123\043\103\044\116\045\125\063\115\064" +
    "\104\067\107\001\001\000\002\001\001\000\024\035\114" +
    "\040\361\041\123\043\103\044\116\045\125\063\115\064" +
    "\104\067\107\001\001\000\002\001\001\000\004\047\363" +
    "\001\001\000\002\001\001\000\024\035\114\040\365\041" +
    "\123\043\103\044\116\045\125\063\115\064\104\067\107" +
    "\001\001\000\002\001\001\000\004\047\367\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\010\310\015\026" +
    "\017\372\020\320\023\303\024\317\025\315\027\313\030" +
    "\314\031\325\036\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\010\310\015\026\017\u0103\020\320\023" +
    "\303\024\317\025\315\027\313\030\314\031\325\036\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\035\114\040\u0107\041\123\043\103\044\116" +
    "\045\125\063\115\064\104\067\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\u0143\035\114\040\121\041\123\043\103\044" +
    "\116\045\125\063\115\064\104\067\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\035\114\040\157\041" +
    "\123\043\103\044\116\045\125\053\u0123\063\115\064\104" +
    "\067\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\u0118\001\001\000\002\001\001\000\030\010\310" +
    "\015\026\017\u0116\020\320\023\303\024\317\025\315\027" +
    "\313\030\314\031\325\036\324\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\u011c\035\114\040\121\041\123\043\103\044\116" +
    "\045\125\063\115\064\104\067\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\052\u0125\057\u0127\001\001\000\002\001" +
    "\001\000\030\010\310\015\026\017\u0116\020\320\023\303" +
    "\024\317\025\315\027\313\030\314\031\325\036\324\001" +
    "\001\000\004\056\u012a\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\u012b\035\114\040\121\041\123\043" +
    "\103\044\116\045\125\063\115\064\104\067\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\052\u012f\057\u0130\001\001\000\002\001\001\000\004" +
    "\056\u0132\001\001\000\002\001\001\000\026\014\u0133\035" +
    "\114\040\121\041\123\043\103\044\116\045\125\063\115" +
    "\064\104\067\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\u0137\057\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\035\114\040" +
    "\157\041\123\043\103\044\116\045\125\053\u013a\063\115" +
    "\064\104\067\107\001\001\000\002\001\001\000\006\052" +
    "\u013c\057\u013d\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\052\u013f\057\u0140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\035" +
    "\114\040\u0147\041\123\043\103\044\116\045\125\063\115" +
    "\064\104\067\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\010\310\015\026\017\u014a\020\320\023\303" +
    "\024\317\025\315\027\313\030\314\031\325\036\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\u0152\033" +
    "\u0153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\u016c\033\u0153\036\u016d\001\001\000" +
    "\014\035\114\043\u0155\063\260\064\104\067\107\001\001" +
    "\000\002\001\001\000\026\010\u0158\015\026\023\u0157\024" +
    "\u015d\025\u015c\027\u015a\030\u015b\031\u0161\034\u0160\042\u015e" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\u0166\052\u010a\055\u0114\056\u010b\057\u0111\060\u0167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\u0164\015\026" +
    "\001\001\000\026\010\u0158\015\026\023\u0157\024\u015d\025" +
    "\u015c\027\u015a\030\u015b\031\u0161\034\u0160\042\u0162\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\010\310\015" +
    "\026\017\u016a\020\320\023\303\024\317\025\315\027\313" +
    "\030\314\031\325\036\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\u016e\033\u0153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\010\u0158\015\026\023\u0157\024\u015d\025\u015c" +
    "\027\u015a\030\u015b\031\u0161\034\u0160\042\u0172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\035\114\040\u0177\041\123\043\103\044" +
    "\116\045\125\063\115\064\104\067\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\010\310\015\026\017" +
    "\u017a\020\320\023\303\024\317\025\315\027\313\030\314" +
    "\031\325\036\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\310\015\026\017\u017e" +
    "\020\320\023\303\024\317\025\315\027\313\030\314\031" +
    "\325\036\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u0182\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\310\015\026\017\u0185" +
    "\020\320\023\303\024\317\025\315\027\313\030\314\031" +
    "\325\036\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\045\007\043\010\031\015\026" +
    "\016\041\021\u018c\022\044\050\042\073\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\045\007\043\010\031\015\026\016" +
    "\041\021\u0191\022\044\050\042\073\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u019b\001\001\000\004\004\u0196\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\u01a0\001\001\000\004\004\u019f\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u01a2\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   
/*declaracion de variables para capturar Strigns para la tabla de simbolos*/
        private String nombreClase = "";
        private String tipoInt = "Int";
        private int  contCambio = 0;
        private ArrayList<Variable> variablesAux = new ArrayList<>();
        private TablaSimbolo tabla = new TablaSimbolo();
        private ArrayList<errorE> errores = new ArrayList<>();
        private boolean isProyecto1 = true;
        
 /* Connect this parser to a scanner!*/
	public SintacticoJava(LexicoJava analizadorLexico) {
		super(analizadorLexico);
	}

        @Override
        public void syntax_error(Symbol tok) {
	    try{
	        Token token = (Token) tok.value;
                report_error("Error Sintactico con el  Token:"+ token.getLexema()+" este no pertenece a la estructura - linea: "+token.getFila()+" - columna: "+token.getColumna() + "\n",null);
                errores.add(new errorE(token.getLexema(),token.getFila(),token.getColumna(),"Se esperaba","Sintactico",nombreClase,isProyecto1));
            }catch(Exception e){
                e.printStackTrace();
	    }	
	}

        public void noEsConstructor(Token token){
              if(!token.getLexema().equals(nombreClase)){

                     report_error("Error Sintactico con el  Token:"+ token.getLexema()+" este no pertenece a la estructura - linea: "+token.getFila()+" - columna: "+token.getColumna() + "\n",null);
                     errores.add(new errorE(token.getLexema(),token.getFila(),token.getColumna(),"Se esperaba","Sintactico",nombreClase,isProyecto1));
              }  
        }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {


        }else{
             
        }
    }

    public void setTabla(TablaSimbolo tabla){
        this.tabla = tabla;
    }
    public TablaSimbolo getTable(){
        return this.tabla;
    }

     public ArrayList<errorE> getErrores() {
        return errores;
    }

    public void setErrores(ArrayList<errorE> errores) {
        this.errores = errores;
    } 

     public boolean isIsProyecto1() {
        return isProyecto1;
    }

    public void setIsProyecto1(boolean isProyecto1) {
        this.isProyecto1 = isProyecto1;
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoJava$actions {
  private final SintacticoJava parser;

  /** Constructor */
  CUP$SintacticoJava$actions(SintacticoJava parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoJava$do_action_part00000000(
    int                        CUP$SintacticoJava$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJava$parser,
    java.util.Stack            CUP$SintacticoJava$stack,
    int                        CUP$SintacticoJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJava$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJava$parser.done_parsing();
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= importando definicion_clase 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error LLAVEC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importando ::= IMPORT ID PUNTO item_punto 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("importando",2, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // importando ::= IMPORT ID PUNTOCOMA importando 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("importando",2, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // importando ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("importando",2, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // importando ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("importando",2, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // item_punto ::= ID PUNTO item_punto 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("item_punto",1, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // item_punto ::= ID PUNTOCOMA importando 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("item_punto",1, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // item_punto ::= MULTIPLICACION PUNTOCOMA importando 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("item_punto",1, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // item_punto ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("item_punto",1, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definicion_clase ::= visibilidad comodin_Class LLAVEA sentencias_global LLAVEC 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_clase",3, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // definicion_clase ::= FINAL comodin_Class LLAVEA sentencias_global LLAVEC 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_clase",3, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // definicion_clase ::= comodin_Class LLAVEA sentencias_global LLAVEC 
            {
              Object RESULT =null;
	
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_clase",3, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comodin_Class ::= CLASS ID 
            {
              Object RESULT =null;
		int nomClaseleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int nomClaseright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Token nomClase = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		 nombreClase = nomClase.getLexema(); tabla.capturarClase(nombreClase);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("comodin_Class",54, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // definicion_metodo ::= visibilidad comodin_Metod LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_metodo",4, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // definicion_metodo ::= error LLAVEC 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_metodo",4, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comodin_Metod ::= tipo ID PARENTESISA parametros PARENTESISC 
            {
              Object RESULT =null;
		int nomMetleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int nomMetright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Token nomMet = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		 tabla.capturarMetodo(variablesAux,nomMet.getLexema(),tipoInt); variablesAux.clear(); 
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("comodin_Metod",55, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comodin_Metod ::= tipo ID PARENTESISA PARENTESISC 
            {
              Object RESULT =null;
		int nomMetleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int nomMetright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Token nomMet = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		 tabla.capturarMetodo(nomMet.getLexema(),tipoInt);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("comodin_Metod",55, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comodin_Metod ::= ID ID PARENTESISA PARENTESISC 
            {
              Object RESULT =null;
		int tipMetodleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int tipMetodright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Token tipMetod = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int nomMetleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int nomMetright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Token nomMet = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		 tabla.capturarMetodo(nomMet.getLexema(),tipMetod.getLexema());
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("comodin_Metod",55, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comodin_Metod ::= ID ID PARENTESISA parametros PARENTESISC 
            {
              Object RESULT =null;
		int tipMetodleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int tipMetodright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		Token tipMetod = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int nomMetleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int nomMetright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Token nomMet = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		 tabla.capturarMetodo(variablesAux,nomMet.getLexema(),tipMetod.getLexema()); variablesAux.clear();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("comodin_Metod",55, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // definicion_variable ::= visibilidad variables 
            {
              Object RESULT =null;
		 tabla.actualizarVar(true,contCambio); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_variable",5, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // definicion_variable ::= variables 
            {
              Object RESULT =null;
		 tabla.actualizarVar(true,contCambio); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_variable",5, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // definicion_variable ::= FINAL variables 
            {
              Object RESULT =null;
		 tabla.actualizarVar(true,contCambio); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_variable",5, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // definicion_variable ::= visibilidad ID items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		 tabla.actualizarVar(true,contCambio,tipoVar.getLexema()); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_variable",5, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // definicion_variable ::= FINAL ID items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		 tabla.actualizarVar(true,contCambio,tipoVar.getLexema()); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_variable",5, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // definicion_variable ::= ID items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		 tabla.actualizarVar(true,contCambio,tipoVar.getLexema()); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_variable",5, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variables ::= tipo items_coma 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // items_coma ::= ID items 
            {
              Object RESULT =null;
		int nomVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int nomVarright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Token nomVar = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		tabla.capturarVariableIndividual(nomVar.getLexema(), tipoInt); contCambio++;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("items_coma",7, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // items_coma ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("items_coma",7, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // items ::= IGUAL asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("items",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // items ::= IGUAL asignacion COMA items_coma 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("items",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // items ::= COMA items_coma 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("items",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // items ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("items",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // items ::= error ID 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("items",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fin_asignar ::= FINAL 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("fin_asignar",9, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fin_asignar ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("fin_asignar",9, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion ::= condition 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= NEW ID PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion ::= NEW ID PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo ::= INT 
            {
              Object RESULT =null;
		tipoInt = "int";
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		tipoInt = "boolean";
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo ::= DOUBLE 
            {
              Object RESULT =null;
		tipoInt = "double";
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo ::= STRING 
            {
              Object RESULT =null;
		tipoInt = "String";
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= CHAR 
            {
              Object RESULT =null;
		tipoInt = "char";
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // visibilidad ::= PUBLIC fin_asignar 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("visibilidad",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // visibilidad ::= PROTECTED fin_asignar 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("visibilidad",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // visibilidad ::= PRIVATE fin_asignar 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("visibilidad",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencias ::= error sentencias 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencias",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencias_global ::= sentencia_global sentencias_global 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencias_global",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencias_global ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencias_global",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia_global ::= constructor 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia_global",16, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia_global ::= definicion_variable 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia_global",16, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia_global ::= definicion_metodo 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia_global",16, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= definicion_if 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia ::= definicion_ifelse 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia ::= definicion_while 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= definicion_dowhile 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= definicion_for 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= FINAL variables 
            {
              Object RESULT =null;
		tabla.actualizarVar(false,contCambio); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= salid 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= variables 
            {
              Object RESULT =null;
		tabla.actualizarVar(false,contCambio); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= ID idOption 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= ID items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		tabla.actualizarVar(false,contCambio,tipoVar.getLexema()); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= definicion_switch 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= FINAL ID items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		tabla.actualizarVar(false,contCambio,tipoVar.getLexema()); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencia",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // idOption ::= increment 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("idOption",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // idOption ::= var_llamad_asigan mas_igual asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("idOption",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // idOption ::= PARENTESISA PARENTESISC var_llamad_asigan mas_igual asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("idOption",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // idOption ::= PARENTESISA parametros_llamada PARENTESISC var_llamad_asigan mas_igual asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("idOption",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // idOption ::= mas_igual asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("idOption",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // idOption ::= llamada_metodo PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("idOption",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // idOption ::= PARENTESISA PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("idOption",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // idOption ::= PARENTESISA parametros_llamada PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("idOption",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // idOption ::= PARENTESISA PARENTESISC llamada_metodo PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("idOption",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // idOption ::= PARENTESISA parametros_llamada PARENTESISC llamada_metodo PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("idOption",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // var_llamad_asigan ::= PUNTO ID PARENTESISA PARENTESISC var_llamad_asigan 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var_llamad_asigan",45, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // var_llamad_asigan ::= PUNTO ID PARENTESISA parametros_llamada PARENTESISC var_llamad_asigan 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var_llamad_asigan",45, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // var_llamad_asigan ::= PUNTO ID var_llamad_asigan 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var_llamad_asigan",45, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // var_llamad_asigan ::= PUNTO ID 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var_llamad_asigan",45, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // var_llamad_asigan ::= error sentencias 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var_llamad_asigan",45, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // mas_igual ::= IGUAL 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("mas_igual",44, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // mas_igual ::= MAS IGUAL 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("mas_igual",44, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // increment ::= MAS MAS PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("increment",43, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // increment ::= MENOS MENOS PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("increment",43, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // increment ::= var_llamad_asigan MAS MAS PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("increment",43, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // increment ::= var_llamad_asigan MENOS MENOS PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("increment",43, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // definicion_if ::= IF PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_if",17, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // definicion_ifelse ::= definicion_if ELSE LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_ifelse",18, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // definicion_for ::= FOR PARENTESISA condition_for PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_for",19, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // definicion_while ::= WHILE PARENTESISA condition PARENTESISC LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_while",21, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // definicion_dowhile ::= DO LLAVEA sentencias LLAVEC WHILE PARENTESISA condition PARENTESISC PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_dowhile",22, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // definicion_switch ::= SWITCH PARENTESISA ID PARENTESISC LLAVEA cases LLAVEC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_switch",23, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cases ::= caso_sw salid cases 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("cases",24, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cases ::= caso_sw cases 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("cases",24, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cases ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("cases",24, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cases ::= error CASO 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("cases",24, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // caso_sw ::= CASO agrupation DOPUNTO sentencias_switch 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_sw",25, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // caso_sw ::= DEFAULT DOPUNTO sentencias_switch 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_sw",25, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencias_switch ::= factor_casos sentencias_switch 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencias_switch",32, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencias_switch ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("sentencias_switch",32, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factor_casos ::= definicion_if 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor_casos ::= definicion_ifelse 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // factor_casos ::= definicion_while 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // factor_casos ::= definicion_dowhile 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor_casos ::= definicion_for 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // factor_casos ::= FINAL variables 
            {
              Object RESULT =null;
		tabla.actualizarVar(false,contCambio); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // factor_casos ::= variables 
            {
              Object RESULT =null;
		tabla.actualizarVar(false,contCambio); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor_casos ::= ID idOption 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor_casos ::= ID items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		tabla.actualizarVar(false,contCambio,tipoVar.getLexema()); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // factor_casos ::= definicion_switch 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // factor_casos ::= FINAL ID items_coma 
            {
              Object RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Token tipoVar = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		tabla.actualizarVar(false,contCambio,tipoVar.getLexema()); contCambio = 0;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("factor_casos",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // terminal_casos ::= ID 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // terminal_casos ::= ID acceso_termin_var_metod 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // terminal_casos ::= ID PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // terminal_casos ::= ID PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // terminal_casos ::= ID PARENTESISA PARENTESISC acceso_termin_var_metod 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // terminal_casos ::= ID PARENTESISA parametros_llamada PARENTESISC acceso_termin_var_metod 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // terminal_casos ::= ENTERO 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // terminal_casos ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // terminal_casos ::= CARACTER 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // terminal_casos ::= CADENA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("terminal_casos",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // acceso_termin_var_metod ::= PUNTO ID PARENTESISA PARENTESISC acceso_termin_var_metod 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // acceso_termin_var_metod ::= PUNTO ID PARENTESISA parametros_llamada PARENTESISC acceso_termin_var_metod 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // acceso_termin_var_metod ::= PUNTO ID acceso_termin_var_metod 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // acceso_termin_var_metod ::= PUNTO ID 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // acceso_termin_var_metod ::= PUNTO ID PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // acceso_termin_var_metod ::= PUNTO ID PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // acceso_termin_var_metod ::= error PARENTESISC 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("acceso_termin_var_metod",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // salid ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("salid",28, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // salid ::= RETURN retorno PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("salid",28, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // retorno ::= condition 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("retorno",29, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // retorno ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("retorno",29, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // condition ::= logica 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // condition ::= definicion_and 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // condition ::= definicion_or 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // condition ::= NEGATION definicion_and 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // condition ::= NEGATION definicion_or 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // condition ::= NEGATION logica 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // condition ::= error PARENTESISC 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condition",30, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // logica ::= agrupation MAYORQ agrupation 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // logica ::= agrupation MENORQ agrupation 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // logica ::= agrupation MAYOROI agrupation 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // logica ::= agrupation MENOROI agrupation 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // logica ::= agrupation NOTEQUALS agrupation 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // logica ::= agrupation EQUALS agrupation 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // logica ::= TRUE 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // logica ::= FALSE 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // logica ::= e_inicial 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // logica ::= CADENA PUNTO PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // logica ::= CADENA PUNTO PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("logica",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // agrupation ::= e_inicial 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("agrupation",33, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // e_inicial ::= t_production e_pri 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("e_inicial",49, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // e_pri ::= MAS t_production e_pri 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("e_pri",51, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // e_pri ::= MENOS t_production e_pri 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("e_pri",51, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // e_pri ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("e_pri",51, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // t_production ::= f_terminal t_pri 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("t_production",50, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // t_pri ::= MULTIPLICACION f_terminal t_pri 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("t_pri",52, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // t_pri ::= DIVISION f_terminal t_pri 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("t_pri",52, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // t_pri ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("t_pri",52, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // f_terminal ::= PARENTESISA e_inicial PARENTESISC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("f_terminal",53, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // f_terminal ::= terminal_casos 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("f_terminal",53, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // definicion_and ::= logica AND logica 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_and",34, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // definicion_and ::= logica AND logica AND condition 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_and",34, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // definicion_and ::= logica AND logica OR condition 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_and",34, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // definicion_or ::= logica OR logica 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_or",35, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // definicion_or ::= logica OR logica OR condition 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_or",35, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // definicion_or ::= logica OR logica AND condition 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("definicion_or",35, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // condition_for ::= var_iterador ID IGUAL ID PUNTOCOMA condition PUNTOCOMA operation_for 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condition_for",36, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // condition_for ::= var_iterador ID IGUAL ENTERO PUNTOCOMA condition PUNTOCOMA operation_for 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condition_for",36, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // condition_for ::= var_iterador ID IGUAL DECIMAL PUNTOCOMA condition PUNTOCOMA operation_for 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condition_for",36, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // var_iterador ::= INT 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var_iterador",48, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // var_iterador ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var_iterador",48, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // var_iterador ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var_iterador",48, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // operation_for ::= ID MAS MAS 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operation_for",37, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // operation_for ::= ID MENOS MENOS 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operation_for",37, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // operation_for ::= ID IGUAL condition 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operation_for",37, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // operation_for ::= ID MAS IGUAL condition 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operation_for",37, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // operation_for ::= ID MENOS IGUAL condition 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operation_for",37, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // constructor ::= visibilidad comodin_Consturc LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("constructor",38, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // constructor ::= comodin_Consturc LLAVEA sentencias LLAVEC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("constructor",38, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // comodin_Consturc ::= ID PARENTESISA parametros PARENTESISC 
            {
              Object RESULT =null;
		int nomMetleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int nomMetright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Token nomMet = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		 noEsConstructor(nomMet); tabla.capturarMetodo(variablesAux,nomMet.getLexema(),"Constructor"); variablesAux.clear(); 
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("comodin_Consturc",57, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // comodin_Consturc ::= ID PARENTESISA PARENTESISC 
            {
              Object RESULT =null;
		int nomMetleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int nomMetright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Token nomMet = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		 noEsConstructor(nomMet); tabla.capturarMetodo(nomMet.getLexema(),"Constructor");
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("comodin_Consturc",57, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // parametros ::= comodin_param 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // parametros ::= comodin_param COMA parametros 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // parametros ::= error PARENTESISC 
            {
              Object RESULT =null;
		
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // comodin_param ::= tipo ID 
            {
              Object RESULT =null;
		int nomParleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int nomParright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Token nomPar = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		 variablesAux.add(new Variable(nomPar.getLexema(),tipoInt));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("comodin_param",56, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // comodin_param ::= ID ID 
            {
              Object RESULT =null;
		int tipoParleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int tipoParright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Token tipoPar = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int nomParleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int nomParright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Token nomPar = (Token)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		 variablesAux.add(new Variable(nomPar.getLexema(),tipoPar.getLexema()));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("comodin_param",56, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // llamada_metodo ::= PUNTO ID PARENTESISA PARENTESISC llamada_metodo 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("llamada_metodo",40, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // llamada_metodo ::= PUNTO ID PARENTESISA parametros_llamada PARENTESISC llamada_metodo 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("llamada_metodo",40, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // llamada_metodo ::= PUNTO ID llamada_metodo 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("llamada_metodo",40, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // llamada_metodo ::= PUNTO ID PARENTESISA parametros_llamada PARENTESISC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("llamada_metodo",40, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // llamada_metodo ::= PUNTO ID PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("llamada_metodo",40, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // parametros_llamada ::= condition COMA parametros_llamada 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // parametros_llamada ::= condition 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // parametros_llamada ::= NEW recurcion_new 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // recurcion_new ::= ID PARENTESISA parametros_llamada PARENTESISC siguiente 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("recurcion_new",42, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // recurcion_new ::= ID PARENTESISA PARENTESISC siguiente 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("recurcion_new",42, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // siguiente ::= COMA parametros_llamada 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("siguiente",47, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // siguiente ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("siguiente",47, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoJava$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoJava$do_action(
    int                        CUP$SintacticoJava$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJava$parser,
    java.util.Stack            CUP$SintacticoJava$stack,
    int                        CUP$SintacticoJava$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoJava$do_action_part00000000(
                               CUP$SintacticoJava$act_num,
                               CUP$SintacticoJava$parser,
                               CUP$SintacticoJava$stack,
                               CUP$SintacticoJava$top);
    }
}

}
