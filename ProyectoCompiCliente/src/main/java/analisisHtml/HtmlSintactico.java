
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisisHtml;

import reporteHtml.Token;
import reporteHtml.EtiquetasReporteHtml;
import reporteHtml.TablaSimboloHtml;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import tablaSimbolo.TablaSimbolo;
import java_cup.runtime.XMLElement;
import objetosAnalisis.errorE;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class HtmlSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public HtmlSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public HtmlSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public HtmlSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\017\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\002" +
    "\000\002\004\004\000\002\005\004\000\002\006\004\000" +
    "\002\006\004\000\002\021\003\000\002\007\004\000\002" +
    "\007\005\000\002\007\004\000\002\007\003\000\002\010" +
    "\004\000\002\025\005\000\002\025\003\000\002\025\005" +
    "\000\002\025\003\000\002\025\003\000\002\025\005\000" +
    "\002\026\005\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\003" +
    "\004\000\002\013\004\000\002\014\004\000\002\014\005" +
    "\000\002\014\004\000\002\014\003\000\002\015\004\000" +
    "\002\022\003\000\002\016\004\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\005\000\002\027\005\000\002\030\003\000" +
    "\002\030\010\000\002\030\010\000\002\030\010\000\002" +
    "\030\010\000\002\030\010\000\002\030\010\000\002\030" +
    "\010\000\002\031\005\000\002\031\005\000\002\034\010" +
    "\000\002\033\003\000\002\033\003\000\002\020\006\000" +
    "\002\011\003\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\023\005\000\002\036\005\000" +
    "\002\012\004\000\002\012\003\000\002\037\004\000\002" +
    "\037\004\000\002\037\002\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\041\007\000\002\041\007\000\002" +
    "\042\005\000\002\043\005\000\002\043\004\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\045\005\000\002\045\004\000\002\046\005\000\002\046" +
    "\004\000\002\047\004\000\002\047\003\000\002\050\004" +
    "\000\002\050\004\000\002\050\003\000\002\050\003\000" +
    "\002\050\004\000\002\050\003\000\002\051\015\000\002" +
    "\051\014\000\002\053\005\000\002\053\004\000\002\054" +
    "\004\000\002\054\004\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\004\000\002\055\005\000" +
    "\002\055\004\000\002\056\004\000\002\056\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\060" +
    "\015\000\002\060\014\000\002\061\004\000\002\061\003" +
    "\000\002\062\003\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\012\004\ufffc\040\011\053\005\054\015\001" +
    "\002\000\012\004\ufffc\040\011\053\005\054\015\001\002" +
    "\000\004\040\u010a\001\002\000\004\044\366\001\002\000" +
    "\012\004\ufffc\040\011\053\005\054\015\001\002\000\010" +
    "\036\316\037\321\044\320\001\002\000\004\044\uffc4\001" +
    "\002\000\012\004\ufffc\040\011\053\005\054\015\001\002" +
    "\000\004\004\066\001\002\000\004\002\064\001\002\000" +
    "\004\040\063\001\002\000\010\036\017\037\022\044\021" +
    "\001\002\000\004\040\060\001\002\000\006\036\054\037" +
    "\055\001\002\000\014\005\032\006\030\040\026\042\027" +
    "\065\031\001\002\000\012\004\uffe0\040\uffe0\053\uffe0\054" +
    "\uffe0\001\002\000\012\004\uffe5\040\uffe5\053\uffe5\054\uffe5" +
    "\001\002\000\016\036\uffdd\037\uffdd\045\046\046\043\047" +
    "\047\050\045\001\002\000\020\036\uffd6\037\uffd6\043\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\001\002\000\020\036" +
    "\uffd5\037\uffd5\043\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\001\002\000\014\005\032\006\030\040\026\042\027\065" +
    "\031\001\002\000\020\036\uffd7\037\uffd7\043\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\001\002\000\004\051\033\001" +
    "\002\000\020\036\uffd8\037\uffd8\043\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\001\002\000\006\005\036\040\035\001" +
    "\002\000\004\052\037\001\002\000\004\052\uffc6\001\002" +
    "\000\004\052\uffc7\001\002\000\004\027\040\001\002\000" +
    "\004\070\041\001\002\000\020\036\uffc8\037\uffc8\043\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002\000\014\043" +
    "\044\045\046\046\043\047\047\050\045\001\002\000\014" +
    "\005\032\006\030\040\026\042\027\065\031\001\002\000" +
    "\020\036\uffd4\037\uffd4\043\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\001\002\000\014\005\032\006\030\040\026\042" +
    "\027\065\031\001\002\000\014\005\032\006\030\040\026" +
    "\042\027\065\031\001\002\000\014\005\032\006\030\040" +
    "\026\042\027\065\031\001\002\000\020\036\uffda\037\uffda" +
    "\043\uffda\045\uffda\046\uffda\047\uffda\050\uffda\001\002\000" +
    "\020\036\uffdb\037\uffdb\043\uffdb\045\uffdb\046\uffdb\047\047" +
    "\050\045\001\002\000\020\036\uffd9\037\uffd9\043\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\001\002\000\020\036\uffdc" +
    "\037\uffdc\043\uffdc\045\uffdc\046\uffdc\047\047\050\045\001" +
    "\002\000\004\040\060\001\002\000\012\004\uffe3\040\uffe3" +
    "\053\uffe3\054\uffe3\001\002\000\010\036\017\037\022\044" +
    "\021\001\002\000\012\004\uffe2\040\uffe2\053\uffe2\054\uffe2" +
    "\001\002\000\010\036\uffde\037\uffde\044\uffde\001\002\000" +
    "\012\004\uffdf\040\uffdf\053\uffdf\054\uffdf\001\002\000\012" +
    "\004\uffe1\040\uffe1\053\uffe1\054\uffe1\001\002\000\010\036" +
    "\ufffa\037\ufffa\044\ufffa\001\002\000\004\002\001\001\002" +
    "\000\004\002\000\001\002\000\074\005\072\006\111\007" +
    "\131\010\117\012\121\014\105\024\132\025\071\027\123" +
    "\030\067\031\103\032\122\033\115\036\112\037\100\040" +
    "\120\041\125\042\104\043\102\044\106\045\114\046\134" +
    "\047\070\050\133\051\076\052\075\053\074\054\130\056" +
    "\113\001\002\000\120\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053" +
    "\uffa0\054\uffa0\056\uffa0\001\002\000\120\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\056\uffa7\001\002\000\004" +
    "\071\276\001\002\000\120\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\056\uffb0\001\002\000\076\005\uff94\006" +
    "\uff94\007\uff94\010\uff94\012\uff94\014\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\036" +
    "\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053" +
    "\uff94\054\uff94\056\uff94\001\002\000\120\005\uffa3\006\uffa3" +
    "\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\054\uffa3\056\uffa3\001\002\000\120" +
    "\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\056\uffa4" +
    "\001\002\000\120\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5" +
    "\054\uffa5\056\uffa5\001\002\000\074\005\uff72\006\uff72\007" +
    "\uff72\010\uff72\012\uff72\014\uff72\024\uff72\025\uff72\027\uff72" +
    "\030\uff72\031\uff72\032\uff72\033\uff72\036\uff72\037\uff72\040" +
    "\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72" +
    "\047\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\056" +
    "\uff72\001\002\000\120\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\056\uffad\001\002\000\074\005\uff71\006\uff71" +
    "\007\uff71\010\uff71\012\uff71\014\uff71\024\uff71\025\uff71\027" +
    "\uff71\030\uff71\031\uff71\032\uff71\033\uff71\036\uff71\037\uff71" +
    "\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046" +
    "\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054\uff71" +
    "\056\uff71\001\002\000\120\005\uffab\006\uffab\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\056\uffab\001\002\000\120\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\056\uff9f\001\002\000" +
    "\120\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\056" +
    "\uffac\001\002\000\074\005\072\006\111\010\117\012\121" +
    "\015\230\016\224\024\231\025\216\027\123\030\067\031" +
    "\103\032\122\033\115\036\112\037\100\040\120\041\125" +
    "\042\104\043\102\044\106\045\114\046\134\047\070\050" +
    "\133\051\076\052\075\053\074\054\130\056\113\001\002" +
    "\000\120\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\056\uffaa\001\002\000\076\005\uff93\006\uff93\007\uff93\010" +
    "\uff93\012\uff93\014\uff93\024\uff93\025\uff93\026\uff93\027\uff93" +
    "\030\uff93\031\uff93\032\uff93\033\uff93\036\uff93\037\uff93\040" +
    "\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93" +
    "\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\056" +
    "\uff93\001\002\000\004\007\215\001\002\000\120\005\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\056\uffaf\001\002" +
    "\000\120\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\033\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\056\uffae\001\002\000\120\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\056\uffb1\001\002\000\120\005\uffa9\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\056\uffa9\001\002\000" +
    "\120\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\032\uff9d\033\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\056" +
    "\uff9d\001\002\000\074\005\uff73\006\uff73\007\uff73\010\uff73" +
    "\012\uff73\014\uff73\024\uff73\025\uff73\027\uff73\030\uff73\031" +
    "\uff73\032\uff73\033\uff73\036\uff73\037\uff73\040\uff73\041\uff73" +
    "\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050" +
    "\uff73\051\uff73\052\uff73\053\uff73\054\uff73\056\uff73\001\002" +
    "\000\062\005\072\006\111\011\uffb3\027\123\030\067\031" +
    "\103\032\122\033\115\036\112\037\100\040\120\041\125" +
    "\042\104\043\102\044\106\045\114\046\134\047\070\050" +
    "\133\051\076\052\075\053\074\054\130\056\113\001\002" +
    "\000\120\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\056\uffb2\001\002\000\062\005\072\006\111\013\uffb3\027" +
    "\123\030\067\031\103\032\122\033\115\036\112\037\100" +
    "\040\120\041\125\042\104\043\102\044\106\045\114\046" +
    "\134\047\070\050\133\051\076\052\075\053\074\054\130" +
    "\056\113\001\002\000\120\005\uff9e\006\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044" +
    "\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\056\uff9e\001\002\000\120\005\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\054\uffa1\056\uffa1\001\002\000" +
    "\076\005\uff96\006\uff96\007\uff96\010\uff96\012\uff96\014\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032" +
    "\uff96\033\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96" +
    "\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\053\uff96\054\uff96\056\uff96\001\002\000\004" +
    "\042\136\001\002\000\076\005\uff97\006\uff97\007\uff97\010" +
    "\uff97\012\uff97\014\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\033\uff97\036\uff97\037\uff97\040" +
    "\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97" +
    "\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\056" +
    "\uff97\001\002\000\074\005\072\006\111\007\uff74\010\117" +
    "\012\121\014\105\024\132\025\071\027\123\030\067\031" +
    "\103\032\122\033\115\036\112\037\100\040\120\041\125" +
    "\042\104\043\102\044\106\045\114\046\134\047\070\050" +
    "\133\051\076\052\075\053\074\054\130\056\113\001\002" +
    "\000\120\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\056\uffa2\001\002\000\004\002\uff76\001\002\000\076\005" +
    "\uff95\006\uff95\007\uff95\010\uff95\012\uff95\014\uff95\024\uff95" +
    "\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\056\uff95\001\002\000\120\005\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\056\uffa6\001\002" +
    "\000\120\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8" +
    "\056\uffa8\001\002\000\004\007\uff75\001\002\000\006\040" +
    "\137\057\141\001\002\000\004\043\203\001\002\000\004" +
    "\043\201\001\002\000\004\027\142\001\002\000\014\055" +
    "\147\060\146\061\145\065\151\066\150\001\002\000\020" +
    "\036\uffca\037\uffca\043\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\001\002\000\020\036\uffc9\037\uffc9\043\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\001\002\000\004\051\174\001" +
    "\002\000\004\051\165\001\002\000\020\036\uffd2\037\uffd2" +
    "\043\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\001\002\000" +
    "\004\051\160\001\002\000\004\051\152\001\002\000\006" +
    "\005\036\040\035\001\002\000\004\052\154\001\002\000" +
    "\004\027\155\001\002\000\010\062\156\063\157\070\041" +
    "\001\002\000\020\036\uffcd\037\uffcd\043\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\001\002\000\020\036\uffcc\037\uffcc" +
    "\043\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002\000" +
    "\006\005\036\040\035\001\002\000\004\052\162\001\002" +
    "\000\004\027\163\001\002\000\004\067\164\001\002\000" +
    "\020\036\uffcb\037\uffcb\043\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\001\002\000\006\005\036\040\035\001\002\000" +
    "\004\052\167\001\002\000\004\027\170\001\002\000\010" +
    "\062\172\063\173\064\171\001\002\000\020\036\uffce\037" +
    "\uffce\043\uffce\045\uffce\046\uffce\047\uffce\050\uffce\001\002" +
    "\000\020\036\uffd0\037\uffd0\043\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\001\002\000\020\036\uffcf\037\uffcf\043\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\001\002\000\006\005" +
    "\036\040\035\001\002\000\004\052\176\001\002\000\004" +
    "\027\177\001\002\000\004\062\200\001\002\000\020\036" +
    "\uffd1\037\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\001\002\000\004\041\202\001\002\000\120\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b" +
    "\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b" +
    "\051\uff9b\052\uff9b\053\uff9b\054\uff9b\056\uff9b\001\002\000" +
    "\004\041\204\001\002\000\120\005\uff9c\006\uff9c\007\uff9c" +
    "\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016" +
    "\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\056\uff9c\001\002\000\064\005\072" +
    "\006\111\011\uffb3\013\uffb3\027\123\030\067\031\103\032" +
    "\122\033\115\036\112\037\100\040\120\041\125\042\104" +
    "\043\102\044\106\045\114\046\134\047\070\050\133\051" +
    "\076\052\075\053\074\054\130\056\113\001\002\000\004" +
    "\013\211\001\002\000\064\005\072\006\111\011\uffb3\013" +
    "\uffb3\027\123\030\067\031\103\032\122\033\115\036\112" +
    "\037\100\040\120\041\125\042\104\043\102\044\106\045" +
    "\114\046\134\047\070\050\133\051\076\052\075\053\074" +
    "\054\130\056\113\001\002\000\006\011\uffb5\013\uffb5\001" +
    "\002\000\114\005\uff9a\006\uff9a\007\uff9a\010\uff9a\012\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\032\uff9a\033\uff9a\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\056\uff9a\001" +
    "\002\000\006\011\uffb4\013\uffb4\001\002\000\004\011\214" +
    "\001\002\000\114\005\uffb8\006\uffb8\007\uffb8\010\uffb8\012" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047" +
    "\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\056\uffb8" +
    "\001\002\000\004\002\uff77\001\002\000\004\071\261\001" +
    "\002\000\106\005\uff8f\006\uff8f\010\uff8f\012\uff8f\015\uff8f" +
    "\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024" +
    "\uff8f\025\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\056\uff8f\001\002\000\074\005\072\006" +
    "\111\010\117\012\121\015\uff7a\016\224\024\231\025\216" +
    "\027\123\030\067\031\103\032\122\033\115\036\112\037" +
    "\100\040\120\041\125\042\104\043\102\044\106\045\114" +
    "\046\134\047\070\050\133\051\076\052\075\053\074\054" +
    "\130\056\113\001\002\000\106\005\uff8e\006\uff8e\010\uff8e" +
    "\012\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022" +
    "\uff8e\023\uff8e\024\uff8e\025\uff8e\027\uff8e\030\uff8e\031\uff8e" +
    "\032\uff8e\033\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042" +
    "\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e" +
    "\051\uff8e\052\uff8e\053\uff8e\054\uff8e\056\uff8e\001\002\000" +
    "\074\005\072\006\111\010\117\012\121\015\uff7b\016\224" +
    "\024\231\025\216\027\123\030\067\031\103\032\122\033" +
    "\115\036\112\037\100\040\120\041\125\042\104\043\102" +
    "\044\106\045\114\046\134\047\070\050\133\051\076\052" +
    "\075\053\074\054\130\056\113\001\002\000\074\005\072" +
    "\006\111\010\117\012\121\015\uff79\016\224\024\231\025" +
    "\216\027\123\030\067\031\103\032\122\033\115\036\112" +
    "\037\100\040\120\041\125\042\104\043\102\044\106\045" +
    "\114\046\134\047\070\050\133\051\076\052\075\053\074" +
    "\054\130\056\113\001\002\000\074\005\072\006\111\010" +
    "\117\012\121\017\240\020\236\022\237\024\231\027\123" +
    "\030\067\031\103\032\122\033\115\036\112\037\100\040" +
    "\120\041\125\042\104\043\102\044\106\045\114\046\134" +
    "\047\070\050\133\051\076\052\075\053\074\054\130\056" +
    "\113\001\002\000\106\005\uff91\006\uff91\010\uff91\012\uff91" +
    "\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023" +
    "\uff91\024\uff91\025\uff91\027\uff91\030\uff91\031\uff91\032\uff91" +
    "\033\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043" +
    "\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\052\uff91\053\uff91\054\uff91\056\uff91\001\002\000\004\015" +
    "\232\001\002\000\106\005\uff92\006\uff92\010\uff92\012\uff92" +
    "\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023" +
    "\uff92\024\uff92\025\uff92\027\uff92\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043" +
    "\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92" +
    "\052\uff92\053\uff92\054\uff92\056\uff92\001\002\000\076\005" +
    "\uff7e\006\uff7e\007\uff7e\010\uff7e\012\uff7e\014\uff7e\024\uff7e" +
    "\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033" +
    "\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e" +
    "\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052" +
    "\uff7e\053\uff7e\054\uff7e\056\uff7e\001\002\000\106\005\uff90" +
    "\006\uff90\010\uff90\012\uff90\015\uff90\016\uff90\017\uff90\020" +
    "\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\027\uff90" +
    "\030\uff90\031\uff90\032\uff90\033\uff90\036\uff90\037\uff90\040" +
    "\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\056" +
    "\uff90\001\002\000\076\005\uff7f\006\uff7f\007\uff7f\010\uff7f" +
    "\012\uff7f\014\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030" +
    "\uff7f\031\uff7f\032\uff7f\033\uff7f\036\uff7f\037\uff7f\040\uff7f" +
    "\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047" +
    "\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\056\uff7f" +
    "\001\002\000\074\005\072\006\111\010\117\012\121\017" +
    "\uff82\020\236\022\237\024\231\027\123\030\067\031\103" +
    "\032\122\033\115\036\112\037\100\040\120\041\125\042" +
    "\104\043\102\044\106\045\114\046\134\047\070\050\133" +
    "\051\076\052\075\053\074\054\130\056\113\001\002\000" +
    "\074\005\072\006\111\010\117\012\121\017\uff85\020\236" +
    "\022\237\024\231\027\123\030\067\031\103\032\122\033" +
    "\115\036\112\037\100\040\120\041\125\042\104\043\102" +
    "\044\106\045\114\046\134\047\070\050\133\051\076\052" +
    "\075\053\074\054\130\056\113\001\002\000\074\005\072" +
    "\006\111\010\117\012\121\017\uff84\020\236\022\237\024" +
    "\231\027\123\030\067\031\103\032\122\033\115\036\112" +
    "\037\100\040\120\041\125\042\104\043\102\044\106\045" +
    "\114\046\134\047\070\050\133\051\076\052\075\053\074" +
    "\054\130\056\113\001\002\000\070\005\072\006\111\010" +
    "\117\012\121\021\251\024\231\027\123\030\067\031\103" +
    "\032\122\033\115\036\112\037\100\040\120\041\125\042" +
    "\104\043\102\044\106\045\114\046\134\047\070\050\133" +
    "\051\076\052\075\053\074\054\130\056\113\001\002\000" +
    "\070\005\072\006\111\010\117\012\121\023\245\024\231" +
    "\027\123\030\067\031\103\032\122\033\115\036\112\037" +
    "\100\040\120\041\125\042\104\043\102\044\106\045\114" +
    "\046\134\047\070\050\133\051\076\052\075\053\074\054" +
    "\130\056\113\001\002\000\076\005\uff8a\006\uff8a\010\uff8a" +
    "\012\uff8a\015\uff8a\016\uff8a\024\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\036\uff8a\037\uff8a" +
    "\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\056\uff8a\001\002\000\004\017\242\001\002\000\076\005" +
    "\uff8b\006\uff8b\010\uff8b\012\uff8b\015\uff8b\016\uff8b\024\uff8b" +
    "\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033" +
    "\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\054\uff8b\056\uff8b\001\002\000\004\023\247" +
    "\001\002\000\072\005\072\006\111\010\117\012\121\021" +
    "\uffb6\023\uffb6\024\231\027\123\030\067\031\103\032\122" +
    "\033\115\036\112\037\100\040\120\041\125\042\104\043" +
    "\102\044\106\045\114\046\134\047\070\050\133\051\076" +
    "\052\075\053\074\054\130\056\113\001\002\000\074\005" +
    "\uff8c\006\uff8c\010\uff8c\012\uff8c\017\uff8c\020\uff8c\022\uff8c" +
    "\024\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\056\uff8c\001\002\000\006\021\uffb7\023\uffb7" +
    "\001\002\000\074\005\uff8d\006\uff8d\010\uff8d\012\uff8d\017" +
    "\uff8d\020\uff8d\022\uff8d\024\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\033\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\054\uff8d\056\uff8d\001\002\000" +
    "\004\021\252\001\002\000\074\005\uff98\006\uff98\010\uff98" +
    "\012\uff98\017\uff98\020\uff98\022\uff98\024\uff98\027\uff98\030" +
    "\uff98\031\uff98\032\uff98\033\uff98\036\uff98\037\uff98\040\uff98" +
    "\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047" +
    "\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\056\uff98" +
    "\001\002\000\074\005\uff99\006\uff99\010\uff99\012\uff99\017" +
    "\uff99\020\uff99\022\uff99\024\uff99\027\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\051\uff99\052\uff99\053\uff99\054\uff99\056\uff99\001\002\000" +
    "\004\017\uff86\001\002\000\004\017\uff87\001\002\000\004" +
    "\017\uff83\001\002\000\004\015\uff78\001\002\000\004\015" +
    "\uff7d\001\002\000\004\015\uff7c\001\002\000\004\030\262" +
    "\001\002\000\004\040\263\001\002\000\004\031\264\001" +
    "\002\000\004\030\265\001\002\000\004\040\266\001\002" +
    "\000\004\037\267\001\002\000\004\032\270\001\002\000" +
    "\006\016\224\026\271\001\002\000\074\005\uff80\006\uff80" +
    "\010\uff80\012\uff80\015\uff80\016\uff80\024\uff80\025\uff80\027" +
    "\uff80\030\uff80\031\uff80\032\uff80\033\uff80\036\uff80\037\uff80" +
    "\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046" +
    "\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80" +
    "\056\uff80\001\002\000\004\026\275\001\002\000\006\016" +
    "\224\026\uff88\001\002\000\004\026\uff89\001\002\000\074" +
    "\005\uff81\006\uff81\010\uff81\012\uff81\015\uff81\016\uff81\024" +
    "\uff81\025\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81" +
    "\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044" +
    "\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81" +
    "\053\uff81\054\uff81\056\uff81\001\002\000\004\030\277\001" +
    "\002\000\004\040\300\001\002\000\004\031\301\001\002" +
    "\000\004\030\302\001\002\000\004\040\303\001\002\000" +
    "\004\037\304\001\002\000\004\032\305\001\002\000\072" +
    "\005\072\006\111\010\117\012\121\014\105\024\132\026" +
    "\310\027\123\030\067\031\103\032\122\033\115\036\112" +
    "\037\100\040\120\041\125\042\104\043\102\044\106\045" +
    "\114\046\134\047\070\050\133\051\076\052\075\053\074" +
    "\054\130\056\113\001\002\000\072\005\072\006\111\010" +
    "\117\012\121\014\105\024\132\026\uff6d\027\123\030\067" +
    "\031\103\032\122\033\115\036\112\037\100\040\120\041" +
    "\125\042\104\043\102\044\106\045\114\046\134\047\070" +
    "\050\133\051\076\052\075\053\074\054\130\056\113\001" +
    "\002\000\072\005\uff6b\006\uff6b\010\uff6b\012\uff6b\014\uff6b" +
    "\024\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033" +
    "\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b" +
    "\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052" +
    "\uff6b\053\uff6b\054\uff6b\056\uff6b\001\002\000\074\005\uff6f" +
    "\006\uff6f\007\uff6f\010\uff6f\012\uff6f\014\uff6f\024\uff6f\025" +
    "\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\036\uff6f" +
    "\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045" +
    "\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f" +
    "\054\uff6f\056\uff6f\001\002\000\004\026\313\001\002\000" +
    "\072\005\uff6c\006\uff6c\010\uff6c\012\uff6c\014\uff6c\024\uff6c" +
    "\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\036" +
    "\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c" +
    "\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053" +
    "\uff6c\054\uff6c\056\uff6c\001\002\000\074\005\uff70\006\uff70" +
    "\007\uff70\010\uff70\012\uff70\014\uff70\024\uff70\025\uff70\027" +
    "\uff70\030\uff70\031\uff70\032\uff70\033\uff70\036\uff70\037\uff70" +
    "\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046" +
    "\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70" +
    "\056\uff70\001\002\000\004\026\uff6e\001\002\000\004\004" +
    "\ufffe\001\002\000\006\003\325\040\327\001\002\000\012" +
    "\004\ufffb\040\ufffb\053\ufffb\054\ufffb\001\002\000\010\040" +
    "\335\056\337\057\336\001\002\000\012\004\ufff3\040\ufff3" +
    "\053\ufff3\054\ufff3\001\002\000\006\036\323\037\324\001" +
    "\002\000\006\003\325\040\327\001\002\000\012\004\ufff6" +
    "\040\ufff6\053\ufff6\054\ufff6\001\002\000\004\037\332\001" +
    "\002\000\012\004\ufff5\040\ufff5\053\ufff5\054\ufff5\001\002" +
    "\000\010\036\ufff7\037\ufff7\044\ufff7\001\002\000\010\036" +
    "\316\037\321\044\320\001\002\000\012\004\ufff9\040\ufff9" +
    "\053\ufff9\054\ufff9\001\002\000\012\004\ufff8\040\ufff8\053" +
    "\ufff8\054\ufff8\001\002\000\010\036\uffee\037\uffee\046\362" +
    "\001\002\000\006\036\ufff2\037\ufff2\001\002\000\010\036" +
    "\uffed\037\uffed\046\360\001\002\000\004\027\351\001\002" +
    "\000\010\036\ufff0\037\ufff0\046\340\001\002\000\014\005" +
    "\345\006\343\040\341\056\346\057\141\001\002\000\010" +
    "\036\uffe6\037\uffe6\046\uffe6\001\002\000\010\036\ufff1\037" +
    "\ufff1\046\347\001\002\000\010\036\uffe9\037\uffe9\046\uffe9" +
    "\001\002\000\010\036\uffe8\037\uffe8\046\uffe8\001\002\000" +
    "\010\036\uffea\037\uffea\046\uffea\001\002\000\010\036\uffe7" +
    "\037\uffe7\046\uffe7\001\002\000\014\005\345\006\343\040" +
    "\341\056\346\057\141\001\002\000\010\036\uffeb\037\uffeb" +
    "\046\uffeb\001\002\000\014\055\147\060\146\061\145\065" +
    "\353\066\150\001\002\000\010\036\uffd3\037\uffd3\046\uffd3" +
    "\001\002\000\004\051\354\001\002\000\006\005\036\040" +
    "\035\001\002\000\004\052\356\001\002\000\004\027\357" +
    "\001\002\000\006\062\156\063\157\001\002\000\014\005" +
    "\345\006\343\040\341\056\346\057\141\001\002\000\010" +
    "\036\uffec\037\uffec\046\347\001\002\000\014\005\345\006" +
    "\343\040\341\056\346\057\141\001\002\000\010\036\uffef" +
    "\037\uffef\046\347\001\002\000\012\004\ufff4\040\ufff4\053" +
    "\ufff4\054\ufff4\001\002\000\004\004\uffff\001\002\000\016" +
    "\005\374\006\371\040\373\042\375\056\367\057\141\001" +
    "\002\000\014\037\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\001\002\000\014\037\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\001\002\000\014\037\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\001\002\000\014\037\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\001\002\000\014\037\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\001\002\000\014\037\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\001\002\000\014\005\032\006\030" +
    "\040\026\042\027\065\031\001\002\000\014\037\u0103\045" +
    "\u0100\046\377\047\u0102\050\u0101\001\002\000\016\005\374" +
    "\006\371\040\373\042\375\056\367\057\141\001\002\000" +
    "\016\005\374\006\371\040\373\042\375\056\367\057\141" +
    "\001\002\000\016\005\374\006\371\040\373\042\375\056" +
    "\367\057\141\001\002\000\016\005\374\006\371\040\373" +
    "\042\375\056\367\057\141\001\002\000\012\004\uffc5\040" +
    "\uffc5\053\uffc5\054\uffc5\001\002\000\014\037\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\001\002\000\014\037\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\001\002\000\014\037\uffc2" +
    "\045\uffc2\046\uffc2\047\u0102\050\u0101\001\002\000\014\037" +
    "\uffc3\045\uffc3\046\uffc3\047\u0102\050\u0101\001\002\000\014" +
    "\043\u0109\045\046\046\043\047\047\050\045\001\002\000" +
    "\014\037\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\001\002" +
    "\000\010\036\uffe4\037\uffe4\044\uffe4\001\002\000\004\004" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\022\002\012\003\006\004\011\005\007\011" +
    "\005\013\015\017\013\020\003\001\001\000\020\002\u010a" +
    "\003\006\004\011\005\007\011\005\013\015\020\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\364" +
    "\003\006\004\011\005\007\011\005\013\015\020\003\001" +
    "\001\000\006\007\316\010\321\001\001\000\002\001\001" +
    "\000\020\002\314\003\006\004\011\005\007\011\005\013" +
    "\015\020\003\001\001\000\004\055\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\022\016\017\001" +
    "\001\000\006\015\061\022\055\001\001\000\002\001\001" +
    "\000\006\034\024\035\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\024\035\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\024\035\052\001\001\000" +
    "\002\001\001\000\006\034\024\035\051\001\001\000\006" +
    "\034\024\035\050\001\001\000\006\034\024\035\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\056\022\055\001\001\000" +
    "\002\001\001\000\006\014\060\016\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\036\125\040\072\041\106\042\123\044\115\053" +
    "\076\056\107\057\126\060\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\036\226\040\216\041\220\042\224\046\221\051" +
    "\222\052\217\054\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\037\212\040\206\041\204\001" +
    "\001\000\002\001\001\000\010\037\205\040\206\041\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\036\125" +
    "\040\072\041\106\042\123\044\115\053\076\056\134\057" +
    "\126\060\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\142\034" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\037\211\040\206\041\204\001" +
    "\001\000\002\001\001\000\010\037\207\040\206\041\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\036\226\040" +
    "\216\041\220\042\224\046\221\051\222\052\217\054\257" +
    "\001\001\000\002\001\001\000\022\036\226\040\216\041" +
    "\220\042\224\046\221\051\222\052\217\054\256\001\001" +
    "\000\022\036\226\040\216\041\220\042\224\046\221\051" +
    "\222\052\217\054\255\001\001\000\022\036\226\040\216" +
    "\041\220\042\224\043\234\045\233\050\240\052\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\036\226\040\216\041\220\042\224\043\234\045\233" +
    "\050\254\052\232\001\001\000\022\036\226\040\216\041" +
    "\220\042\224\043\234\045\233\050\253\052\232\001\001" +
    "\000\022\036\226\040\216\041\220\042\224\043\234\045" +
    "\233\050\252\052\232\001\001\000\016\012\247\036\226" +
    "\040\216\041\220\042\224\052\243\001\001\000\016\012" +
    "\242\036\226\040\216\041\220\042\224\052\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\245\036\226\040\216\041\220" +
    "\042\224\052\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\046\272\047\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\046\272\047\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\036\125\040\072\041\106\042\123\044\311\053\306" +
    "\061\310\062\305\001\001\000\022\036\125\040\072\041" +
    "\106\042\123\044\311\053\306\061\313\062\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\363\021\327\001\001\000\002\001" +
    "\001\000\006\025\333\027\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\325\021\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\330\010\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\341\031\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\347\031\343\001\001" +
    "\000\002\001\001\000\004\030\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\354\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\360\031\343\001\001\000\002\001\001\000\006\026\362" +
    "\031\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\371\031\367\032\375\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\024\035\u0107\001\001\000\002\001\001\000\010\023" +
    "\371\031\367\032\u0106\001\001\000\010\023\371\031\367" +
    "\032\u0105\001\001\000\010\023\371\031\367\032\u0104\001" +
    "\001\000\010\023\371\031\367\032\u0103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HtmlSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HtmlSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HtmlSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   
/*declaracion de variables para capturar Strigns para la tabla de simbolos*/

 /* Connect this parser to a scanner!*/
        private TablaSimbolo VarGlobal = new TablaSimbolo();
        private TablaSimboloHtml tabla = new TablaSimboloHtml();
        private boolean isString=false;
        String operatiosss = "";
        private EtiquetasReporteHtml actionSalid= new EtiquetasReporteHtml();
        private ArrayList<errorE> errores= new ArrayList<>();
        
	public HtmlSintactico(LexicoHtml analizadorLexico) {
		super(analizadorLexico);
	}

        @Override
        public void syntax_error(Symbol tok) {
	    try{
	        Token token = (Token) tok.value;
	        report_error("Error Sintactico con el  Token:"+ token.getLexema()+" este no pertenece a la estructura - linea: "+token.getFila()+" - columna: "+token.getColumna() + "\n",null);
                  errores.add(new errorE(token.getLexema(),token.getFila(),token.getColumna(),"Se esperaba","Sintactico"));
            }catch(Exception e){
                e.printStackTrace();
	    }	
	}


    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {

        }else{
             
        }
    }
    
    public ArrayList<errorE> getErrores(){
        return this.errores;
    }
    


   public void setTablaHtml(TablaSimboloHtml tabla){
        this.tabla = tabla;
    }
    public TablaSimboloHtml getTableHtml(){
        return this.tabla;
    }

    public void setTabla(TablaSimbolo tabla){
        this.VarGlobal = tabla;
    }
    public TablaSimbolo getTable(){
        return this.VarGlobal;
    }

    public EtiquetasReporteHtml getAccionSalida(){
        return this.actionSalid;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$HtmlSintactico$actions {
  private final HtmlSintactico parser;

  /** Constructor */
  CUP$HtmlSintactico$actions(HtmlSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$HtmlSintactico$do_action_part00000000(
    int                        CUP$HtmlSintactico$act_num,
    java_cup.runtime.lr_parser CUP$HtmlSintactico$parser,
    java.util.Stack            CUP$HtmlSintactico$stack,
    int                        CUP$HtmlSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HtmlSintactico$result;

      /* select the action based on the action number */
      switch (CUP$HtmlSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).value;
		RESULT = start_val;
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$HtmlSintactico$parser.done_parsing();
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= def_variable def_html_General 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("inicio",13, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // def_variable ::= variable_integer def_variable 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_variable",0, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // def_variable ::= variable_String def_variable 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_variable",0, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // def_variable ::= var_Asign def_variable 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_variable",0, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def_variable ::= 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_variable",0, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variable_String ::= strin items 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("variable_String",2, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // strin ::= STRING IDD 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		tabla.capturarVarible("String",identificador.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("strin",3, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // items_coma ::= iddItemsComodin items 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("items_coma",4, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // items_coma ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("items_coma",4, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // iddItemsComodin ::= IDD 
            {
              Object RESULT =null;
		int nomVarleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int nomVarright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token nomVar = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		tabla.capturarVarible("String",nomVar.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("iddItemsComodin",15, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // items ::= asignacion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("items",5, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // items ::= asignacion COMA items_coma 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("items",5, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // items ::= COMA items_coma 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("items",5, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // items ::= PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("items",5, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacion ::= IGUAL operationString 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		tabla.capturarContenido(contenido); 
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operationString ::= CADENA MAS concatenacion 
            {
              String RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		Token cadena = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT= cadena.getLexema()+contenido;
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationString",19, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operationString ::= CADENA 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido.getLexema();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationString",19, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operationString ::= subTerminalTabla MAS concatenacion 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		int contenido1left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenido1right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String contenido1 = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido + contenido1;
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationString",19, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operationString ::= subTerminalTabla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido; 
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationString",19, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operationString ::= IDD 
            {
              String RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = tabla.contenidoVariableString(identificador,true);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationString",19, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operationString ::= IDD MAS concatenacion 
            {
              String RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = tabla.contenidoVariableString(identificador , true)+contenido;
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationString",19, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // concatenacion ::= concatenacion MAS concatenacion 
            {
              String RESULT =null;
		int contenido1left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int contenido1right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		String contenido1 = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		int contenido2left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenido2right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String contenido2 = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido1 +contenido2;
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // concatenacion ::= ENTERO 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido.getLexema();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // concatenacion ::= DECIMAL 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido.getLexema();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // concatenacion ::= terminalTabla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido;
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // concatenacion ::= CADENA 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido.getLexema();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // concatenacion ::= IDD 
            {
              String RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = tabla.contenidoVariableString(identificador,false);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable_integer ::= inte items_int 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("variable_integer",1, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inte ::= INTEGER IDD 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		tabla.capturarVarible("Integer",identificador.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("inte",9, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // items_int ::= asignacionInt PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("items_int",10, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // items_int ::= asignacionInt COMA items_coma_B 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("items_int",10, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // items_int ::= COMA items_coma_B 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("items_int",10, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // items_int ::= PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("items_int",10, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // items_coma_B ::= iddComodinInt items_int 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("items_coma_B",11, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // iddComodinInt ::= IDD 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		tabla.capturarVarible("Integer",identificador.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("iddComodinInt",16, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacionInt ::= IGUAL operation 
            {
              Object RESULT =null;
		int valOperationleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int valOperationright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Integer valOperation = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		try{tabla.capturarContenido(String.valueOf(valOperation));}catch(Exception e){e.printStackTrace();}
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("asignacionInt",12, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= operation MAS operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		try{RESULT = numero2+numero1;}catch(Exception e){e.printStackTrace();}
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operation ::= operation MENOS operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		try{RESULT = numero1-numero2;}catch(Exception e){e.printStackTrace();}
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= operation POR operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		try{RESULT = numero2*numero1;}catch(Exception e){e.printStackTrace();}
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= operation DIVISION operation 
            {
              Integer RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		Integer numero1 = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Integer numero2 = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		try{RESULT = numero1/numero2;}catch(Exception e){e.printStackTrace();}
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= ENTERO 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		try{RESULT = Integer.valueOf( num.getLexema());}catch(Exception e){e.printStackTrace();}
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= DECIMAL 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		try{RESULT = (int)Double.parseDouble( num.getLexema());}catch(Exception e){e.printStackTrace();}
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= parametros 
            {
              Integer RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Integer numero = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT= numero;
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= IDD 
            {
              Integer RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = tabla.contenidNumeroVariable(identificador);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operation ::= PARENTESISA operation PARENTESISC 
            {
              Integer RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).right;
		Integer operacion = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).value;
		try{RESULT = operacion;}catch(Exception e){e.printStackTrace();}
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operation",27, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // subTerminalTabla ::= RESULT PUNTO def_var_Globla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido;
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("subTerminalTabla",21, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // def_var_Globla ::= SCORE 
            {
              String RESULT =null;
		int scoreleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int scoreright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token score = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = ""+VarGlobal.getScore();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // def_var_Globla ::= CLASES CORCHETEA index CORCHETEC PUNTO NOMBRE 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).value;
		RESULT = VarGlobal.recuperarNombreClass(indice, pos);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // def_var_Globla ::= VARIABLES CORCHETEA index CORCHETEC PUNTO NOMBRE 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).value;
		RESULT = VarGlobal.recuperacionNomVar(indice,pos);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // def_var_Globla ::= VARIABLES CORCHETEA index CORCHETEC PUNTO TIPO 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).value;
		RESULT = VarGlobal.recuperacionTipoVar(indice,pos);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // def_var_Globla ::= VARIABLES CORCHETEA index CORCHETEC PUNTO FUNCION 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).value;
		RESULT = VarGlobal.recupearacionFuncionPadreVAr(indice, pos);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // def_var_Globla ::= METODOS CORCHETEA index CORCHETEC PUNTO NOMBRE 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).value;
		RESULT = VarGlobal.recuperacionNombreMetodo(indice, pos);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // def_var_Globla ::= METODOS CORCHETEA index CORCHETEC PUNTO TIPO 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).value;
		RESULT = VarGlobal.recuperacionTipoMetodo(indice,pos);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // def_var_Globla ::= COMENTARIOS CORCHETEA index CORCHETEC PUNTO TEXTO 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).value;
		RESULT = VarGlobal.recuperarTextoComentario(indice, pos);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_var_Globla",22, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // terminalTabla ::= RESULT PUNTO def_var_Globla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido;
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("terminalTabla",23, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // terminalTabla ::= RESULT PUNTO parametros 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Integer contenido = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = ""+ contenido;
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("terminalTabla",23, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros ::= METODOS CORCHETEA index CORCHETEC PUNTO PARAMTETROS 
            {
              Integer RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).right;
		Token pos = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).right;
		Integer indice = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)).value;
		RESULT = VarGlobal.recuperarParametrosMetodos(indice, pos);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // index ::= ENTERO 
            {
              Integer RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token numero = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		try{RESULT = Integer.valueOf( numero.getLexema());}catch(Exception e){RESULT =0;e.printStackTrace();}
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("index",25, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // index ::= IDD 
            {
              Integer RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token numero = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = tabla.contenidNumeroVariable(numero);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("index",25, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var_Asign ::= iddVarComodin IGUAL operationAsig PUNTOCOMA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).value;
		tabla.capturarConteniYadeclarad(contenido, isString); tabla.setReporError(true);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("var_Asign",14, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // iddVarComodin ::= IDD 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		isString=tabla.tipoAsignacion(identificador);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("iddVarComodin",7, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operationAsig ::= operationAsig MAS operationAsig 
            {
              String RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = tabla.accionSuma(isString, numero1,numero2,operador);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operationAsig ::= operationAsig MENOS operationAsig 
            {
              String RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = tabla.accionResta(isString, numero1,numero2,operador);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operationAsig ::= operationAsig POR operationAsig 
            {
              String RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = tabla.accionMultiplicar(isString, numero1,numero2,operador);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operationAsig ::= operationAsig DIVISION operationAsig 
            {
              String RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = tabla.accionDividir(isString, numero1,numero2,operador);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operationAsig ::= ENTERO 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido.getLexema();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operationAsig ::= DECIMAL 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido.getLexema();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operationAsig ::= terminalTabla 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido;
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operationAsig ::= CADENA 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = contenido.getLexema();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operationAsig ::= IDD 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		RESULT = tabla.contenidoVariableString(num,false);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operationAsig ::= operationaux 
            {
              String RESULT =null;
		try{RESULT = operatiosss;}catch(Exception e){e.printStackTrace();}
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationAsig",24, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operationaux ::= PARENTESISA operation PARENTESISC 
            {
              Object RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).right;
		Integer operacion = (Integer)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)).value;
		operatiosss= ""+operacion;
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("operationaux",17, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // title1 ::= H1INICIO itemHtml H1FIN 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("title1",28, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // titleRescursiver ::= comodintitle titleRescursiver 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // titleRescursiver ::= comodintitle 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("titleRescursiver",8, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // itemHtml ::= comodinIddHtml itemHtml 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("itemHtml",29, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // itemHtml ::= usoVarGlobal itemHtml 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("itemHtml",29, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // itemHtml ::= 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("itemHtml",29, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comodinIddHtml ::= IDD 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comodinIddHtml ::= CADENA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comodinIddHtml ::= ENTERO 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comodinIddHtml ::= DECIMAL 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comodinIddHtml ::= COMA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comodinIddHtml ::= PUNTOCOMA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comodinIddHtml ::= PARENTESISA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comodinIddHtml ::= PARENTESISC 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comodinIddHtml ::= IGUAL 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comodinIddHtml ::= MENOS 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comodinIddHtml ::= MAS 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comodinIddHtml ::= POR 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comodinIddHtml ::= DIVISION 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comodinIddHtml ::= CORCHETEA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comodinIddHtml ::= CORCHETEC 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comodinIddHtml ::= INTEGER 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comodinIddHtml ::= STRING 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comodinIddHtml ::= PUNTO 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comodinIddHtml ::= DOSPUNTO 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // comodinIddHtml ::= HASTA 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // comodinIddHtml ::= MAYOR 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // comodinIddHtml ::= MENOR 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()).right;
		Token contenido = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.peek()).value;
		actionSalid.setContenidoTem(contenido.getLexema());
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinIddHtml",30, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // usoVarGlobal ::= COMODIN PARENTESISA IDD PARENTESISC COMODIN 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		actionSalid.setContenidoTem(tabla.contenidoVariableString(identificador,false));
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("usoVarGlobal",31, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // usoVarGlobal ::= COMODIN PARENTESISA terminalTabla PARENTESISC COMODIN 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)).value;
		actionSalid.setContenidoTem(contenido);
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("usoVarGlobal",31, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // title2 ::= H2INICIO itemHtml H2FIN 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("title2",32, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // columTitle ::= THINICIO titleRescursiver THFIN 
            {
              Object RESULT =null;
		actionSalid.capturarTH();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("columTitle",33, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // columTitle ::= THINICIO THFIN 
            {
              Object RESULT =null;
		actionSalid.capturarTH();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("columTitle",33, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // comodinH1H2 ::= title1 
            {
              Object RESULT =null;
		actionSalid.capturaH1();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinH1H2",34, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // comodinH1H2 ::= title2 
            {
              Object RESULT =null;
		actionSalid.capturaH2();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinH1H2",34, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // comodinH1H2 ::= SALTO 
            {
              Object RESULT =null;
		actionSalid.capturaBr();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinH1H2",34, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // comodinH1H2 ::= comodinIddHtml 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinH1H2",34, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // comodinH1H2 ::= usoVarGlobal 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinH1H2",34, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // comodintitle ::= title1 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodintitle",40, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comodintitle ::= title2 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodintitle",40, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comodintitle ::= SALTO 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodintitle",40, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comodintitle ::= comodinIddHtml 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodintitle",40, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // comodintitle ::= usoVarGlobal 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodintitle",40, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // columDatos ::= TDINICIO titleRescursiver TDFIN 
            {
              Object RESULT =null;
		actionSalid.capturarTD();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("columDatos",35, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // columDatos ::= TDINICIO TDFIN 
            {
              Object RESULT =null;
		actionSalid.capturarTD();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("columDatos",35, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // fila_columna ::= TRINICIO validosTR TRFIN 
            {
              Object RESULT =null;
		actionSalid.capturarTR();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("fila_columna",36, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // fila_columna ::= TRINICIO TRFIN 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("fila_columna",36, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // fila_columnaRecur ::= fila_columna fila_columnaRecur 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("fila_columnaRecur",37, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // fila_columnaRecur ::= fila_columna 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("fila_columnaRecur",37, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // validosTR ::= columDatos validosTR 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("validosTR",38, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // validosTR ::= columTitle validosTR 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("validosTR",38, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // validosTR ::= columDatos 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("validosTR",38, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // validosTR ::= columTitle 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("validosTR",38, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // validosTR ::= comodintitle validosTR 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("validosTR",38, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // validosTR ::= comodintitle 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("validosTR",38, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // forAnidado ::= FORINICIO ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR fila_columnaRecur FORFIN 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("forAnidado",39, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // forAnidado ::= FORINICIO ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR FORFIN 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("forAnidado",39, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // def_table ::= TABLAINICIO comodinTable TABLAFIN 
            {
              Object RESULT =null;
		actionSalid.caputararTable();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_table",41, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // def_table ::= TABLAINICIO TABLAFIN 
            {
              Object RESULT =null;
		actionSalid.caputararTable();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_table",41, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // comodinTable ::= fila_columna comodinTable 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinTable",42, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // comodinTable ::= comodintitle comodinTable 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinTable",42, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // comodinTable ::= fila_columna 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinTable",42, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // comodinTable ::= comodintitle 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinTable",42, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // comodinTable ::= forAnidado 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinTable",42, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // comodinTable ::= forAnidado comodinTable 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("comodinTable",42, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // def_html_General ::= HTMLINICIO sentencias HTMLFIN 
            {
              Object RESULT =null;
		actionSalid.tostring();
              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_html_General",43, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // def_html_General ::= HTMLINICIO HTMLFIN 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_html_General",43, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("sentencias",44, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("sentencias",44, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencia ::= comodinH1H2 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",45, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencia ::= def_table 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",45, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencia ::= def_for 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",45, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // def_for ::= FORINICIO ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR sentenciasFro FORFIN 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_for",46, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // def_for ::= FORINICIO ITERADOR DOSPUNTO IDD HASTA DOSPUNTO IDD PUNTOCOMA MAYOR FORFIN 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("def_for",46, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sentenciasFro ::= sentenciaFor sentenciasFro 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("sentenciasFro",47, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.elementAt(CUP$HtmlSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sentenciasFro ::= sentenciaFor 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("sentenciasFro",47, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // sentenciaFor ::= comodinH1H2 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("sentenciaFor",48, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sentenciaFor ::= def_table 
            {
              Object RESULT =null;

              CUP$HtmlSintactico$result = parser.getSymbolFactory().newSymbol("sentenciaFor",48, ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlSintactico$stack.peek()), RESULT);
            }
          return CUP$HtmlSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$HtmlSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$HtmlSintactico$do_action(
    int                        CUP$HtmlSintactico$act_num,
    java_cup.runtime.lr_parser CUP$HtmlSintactico$parser,
    java.util.Stack            CUP$HtmlSintactico$stack,
    int                        CUP$HtmlSintactico$top)
    throws java.lang.Exception
    {
              return CUP$HtmlSintactico$do_action_part00000000(
                               CUP$HtmlSintactico$act_num,
                               CUP$HtmlSintactico$parser,
                               CUP$HtmlSintactico$stack,
                               CUP$HtmlSintactico$top);
    }
}

}
